[{"/Users/magnus/GitHub/strecket/src/index.js":"1","/Users/magnus/GitHub/strecket/src/App.js":"2","/Users/magnus/GitHub/strecket/src/app.js":"3","/Users/magnus/GitHub/strecket/src/pages/meg/meg.js":"4","/Users/magnus/GitHub/strecket/src/pages/sell-stock/sell-stock.js":"5","/Users/magnus/GitHub/strecket/src/pages/candidates/candidates.js":"6","/Users/magnus/GitHub/strecket/src/pages/evaluate/evaluate.js":"7","/Users/magnus/GitHub/strecket/src/pages/new-stock/new-stock.js":"8","/Users/magnus/GitHub/strecket/src/pages/home/home.js":"9","/Users/magnus/GitHub/strecket/src/pages/looker/looker.js":"10","/Users/magnus/GitHub/strecket/src/pages/meg/stock-chart-list.js":"11","/Users/magnus/GitHub/strecket/src/pages/config.js":"12","/Users/magnus/GitHub/strecket/src/pages/meg/stock-chart.js":"13","/Users/magnus/GitHub/strecket/src/pages/meg/info-box.js":"14"},{"size":313,"mtime":1612196262707,"results":"15","hashOfConfig":"16"},{"size":1148,"mtime":1612110233334,"results":"17","hashOfConfig":"18"},{"size":970,"mtime":1612205866753,"results":"19","hashOfConfig":"16"},{"size":10119,"mtime":1612194816763,"results":"20","hashOfConfig":"16"},{"size":5311,"mtime":1612194896028,"results":"21","hashOfConfig":"16"},{"size":4917,"mtime":1612194989738,"results":"22","hashOfConfig":"16"},{"size":6860,"mtime":1612194922116,"results":"23","hashOfConfig":"16"},{"size":27994,"mtime":1612198117139,"results":"24","hashOfConfig":"16"},{"size":15152,"mtime":1612198404811,"results":"25","hashOfConfig":"16"},{"size":9149,"mtime":1612194863663,"results":"26","hashOfConfig":"16"},{"size":639,"mtime":1612194710917,"results":"27","hashOfConfig":"16"},{"size":230,"mtime":1612016806112,"results":"28","hashOfConfig":"16"},{"size":9639,"mtime":1612194755897,"results":"29","hashOfConfig":"16"},{"size":13631,"mtime":1612194692818,"results":"30","hashOfConfig":"16"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},"17oxkt2",{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"9z6t82",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"33"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"33"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"33"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"33"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":62,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"33"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"33"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"33"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"33"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"33"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},"/Users/magnus/GitHub/strecket/src/index.js",[],["71","72"],"/Users/magnus/GitHub/strecket/src/App.js",[],["73","74"],"/Users/magnus/GitHub/strecket/src/app.js",[],"/Users/magnus/GitHub/strecket/src/pages/meg/meg.js",["75","76","77","78","79","80","81","82","83","84"],"import React from 'react';\nimport StockChartList from './stock-chart-list.js';\nimport Request from 'yow/request';\nimport {Container, Table, Row, Col} from 'react-bootify';\nimport {Sparklines, SparklinesLine, SparklinesReferenceLine, SparklinesBars} from 'react-sparklines';\n\nrequire('./meg.css');\n\nvar _descr1;\n\n\n\nfunction pad(n) {\n    return (n < 10) ? (\"0\" + n) : n; \n}\n\n\nfunction sweDate(theDate) {\n  var year = theDate.getFullYear();\n  var month = theDate.getMonth()+1;\n  var date = theDate.getDate();\n\n  var time = year.toString() + '-' + pad(month) + '-' + pad(date);\n\n  return time;\n}\n\n \nclass NagotSomFunkarBattreOmNagotBlirFel extends React.Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {spikes:null, dates:null, error:null, sectors:[], tickers: \"\", mmth:\"-\", fearandgreed:\"-\"};\n\t\t\n\t\tthis.handleCheck = this.handleCheck.bind(this);\n\t\tthis.handleChange = this.handleChange.bind(this);\t\t\n\t\t\n\t};\n\n\tgetMMTH() {\n        return new Promise((resolve, reject) => {\n\t        var request = new Request('http://85.24.185.150:3000');\n\t        var query = {};\n\t        \n\t        query.sql = 'SELECT truncate(count(*)/(select count(*) from stocks)*100, 0) as mmth FROM stockquotes INNER JOIN stocks ON stocks.symbol = stockquotes.symbol where stockquotes.date=? and stockquotes.close > stocks.sma200';\n\n\t        query.values = [this.state.dates[0]];\n\n\t        request.get('/mysql', {query:query}).then(response => {\n                resolve(response.body[0].mmth);\n\t        })\n\t        .catch(error => {\n                reject(error);\n\t        })\n        });\n\t\t\n\t}\t\n\t\n\tgetSectors() {\n        return new Promise((resolve, reject) => {\n\t        var request = new Request('http://85.24.185.150:3000');\n\t        var query = {};\n\t        var sectors = [];\n\t        \n\t        query.sql = 'SELECT stocks.industry, sum(b.close>a.close)/count(b.close) as perc FROM stockquotes a INNER JOIN stockquotes b ON a.symbol = b.symbol INNER JOIN stocks ON stocks.symbol = a.symbol where a.date=? and b.date=? and sector <> \"\" and industry <> \"\" group by sector, industry order by perc desc';\n\n\t        query.values = [this.state.dates[1], this.state.dates[0]];\n\n\t        request.get('/mysql', {query:query}).then(response => {\n\t            sectors = response.body;\n                resolve(sectors);\n\t        })\n\t        .catch(error => {\n                reject(error);\n\t        })\n        });\n\t\t\n\t}\n\n\tgetDates() {\n        return new Promise((resolve, reject) => {\n\t        var request = new Request('http://85.24.185.150:3000');\n\t        var query = {};\n\t        var dates = [];\n\n\t\t\t// Räkna ut de två senaste datumen som har kurser och troligen inte är helg (dvs mer än 1000 rader)\n\t        query.sql = 'select distinct date from (SELECT COUNT(date) as c, date FROM stockquotes GROUP BY date HAVING c > 1000) tradeDays order by date desc limit 2';\n\n\t        request.get('/mysql', {query:query}).then(response => {\n\n\t\t        dates[0] = sweDate(new Date(response.body[0].date));\n\t\t        dates[1] = sweDate(new Date(response.body[1].date));\n\n                resolve(dates);\n\t        })\n\t        .catch(error => {\n                reject(error);\n\t        })\n        });\n\t}\n\n\tgetFearAndGreed() {\n        return new Promise((resolve, reject) => {\t\n\t        var request = require(\"client-request\");\n\t\n\t        var options = {\n\t            uri: \"http://85.24.185.150:3000/fearandgreed\",\n\t            method: \"GET\",\n\t            json: true,\n\t            headers: {\n\t                \"content-type\": \"application/json\"\n\t            }\n\t        };\n\t\n\t        var req = request(options, function(err, response, body) {\n\t            if (!err) {\n\t\t            body.pop(); // Ta bort värdet för ett år sen\n\t\t            body.reverse(); // Äldst värde först\n\t                resolve(body);\n\t            } else {\n\t            \tconsole.log(\"Err: getFearAndGreed:\", err);\n\t                reject(err);\n\t            }\n\t        });\n\t\t});\t\t\n\t}\n\n\tgetSpikes() {  \n        return new Promise((resolve, reject) => {\n\t        var request = new Request('http://85.24.185.150:3000');\n\t        var query = {};\n\t        var spikes = [];\n\t        \n\t\t\t_descr1 = \"60% över normal volym, stängt över gårdagen, över 51 week high, över sma200, omsatt mer än 5 miljoner $\";\n\t        query.sql    = 'SELECT a.symbol, a.volume, b.volume, a.close as lastClose, b.close as previousClose FROM stockquotes a INNER JOIN stockquotes b ON a.symbol = b.symbol INNER JOIN stocks ON stocks.symbol = a.symbol WHERE a.date = ? AND b.date = ? AND a.volume > b.AV14*1.6 AND a.close > b.close AND a.close > a.SMA200 AND a.close*a.AV14 > 5000000 AND a.close > a.open AND a.close >= stocks.wh51';\n\n\t        query.values = [this.state.dates[0], this.state.dates[1]];\n\n\t        request.get('/mysql', {query:query}).then(response => {\n\t            var tickers = response.body;\n\t            tickers.forEach(ticker => {\n\t                spikes.push(ticker.symbol);\n\t            });\n\n                resolve(spikes);\n\t        })\n\t        .catch(error => {\n                reject(error);\n\t        })\n        });\n\n\t}\n\t\n\tcomponentDidMount() {\n\n\t\t//this.getFearAndGreed().then(numbers => {\n\t\t\tvar numbers = [33,44,55,66];\n\t\t\tthis.setState({fearandgreed:numbers});\n\t\t\tthis.getDates().then(dates => {\n\t\t        this.setState({dates:dates});\n\t\t\t\tthis.getMMTH().then(perc => {\t\t   \n\t\t\t        this.setState({mmth:perc+\"%\"});\t\t\t\t\t     \n\t\t\t\t\tthis.getSectors().then(sectors => {\n\t\t\t\t        this.setState({sectors:sectors});\n\t\t\t\t        this.getSpikes().then(spikes => {\n\t\t\t\t            this.setState({spikes:spikes});\n\t\t\t\t        })\n\t\t\t\t        .catch(error => {\n\t\t\t\t            console.log(error);\n\t\t\t\t            this.setState({error:error});\n\t\t\t\t        });\n\t\t\t\t    })\n\t\t\t        .catch(error => {\n\t\t\t            console.log(error);\n\t\t\t            this.setState({error:error});\n\t\t\t        });\n\t\t\t    })\n\t\t        .catch(error => {\n\t\t            console.log(error);\n\t\t            this.setState({error:error});\n\t\t        });\t\t\t        \n\t\t    })\n\t        .catch(error => {\n\t            console.log(error);\n\t            this.setState({error:error});\n\t        })\n/*\t    })\n        .catch(error => {\n            console.log(error);\n            this.setState({error:error});\n        })*/\n    }\n    \n    getTopSectors() {\n\t\tthis.state.sectors.sort(function(a, b){return a.perc>b.perc});\t    \n\t\t\n\t\treturn (\n\t\t\t<span><small>\n\t\t\t1. {this.state.sectors[0].industry}<br/>\n\t\t\t2. {this.state.sectors[1].industry}<br/>\n\t\t\t3. {this.state.sectors[2].industry}<br/>\n\t\t\t4. {this.state.sectors[3].industry}<br/>\n\t\t\t5. {this.state.sectors[4].industry}<br/>\t\t\t\n\t\t\t</small></span>\t\t\t\n\t\t);\n    }\n    \n\thandleCheck = (childData) => {\t\t\n\t\tthis.setState({tickers: this.state.tickers == \"\" ? childData : this.state.tickers + \"\\n\" + childData});\t\t\n\t}\n\t\n\thandleChange(event) {\n\t\tthis.setState({tickers: event.target.value});\n\t}\n\t\n\tgetGreedBalls() {\n\t\tvar colors=[];\n\t\tvar index;\n\t\t\n\t\tfor (index = 0; index < this.state.fearandgreed.length; ++index) {\n\t\t\tif (this.state.fearandgreed[index] >= 50)\n\t\t\t\tcolors[index] = \"numberCircleGreen\";\n\t\t\telse\n\t\t\t\tcolors[index] = \"numberCircleRed\";\t\t\t\t\n\t\t}\n\t\t\n\t\treturn (\n\t\t\t<span>\n\t\t\t<span className={colors[0]}>{this.state.fearandgreed[0]}</span>\n\t\t\t<span className={colors[1]}>{this.state.fearandgreed[1]}</span>\n\t\t\t<span className={colors[2]}>{this.state.fearandgreed[2]}</span>\n\t\t\t<span className={colors[3]}>{this.state.fearandgreed[3]}</span>\t\t\t\n\t\t\t</span>\n\t\t)\n\t}\n\n    render() {\n        if (this.state.spikes) {\n\t        \n            var style = {};\n            style.display = 'block';\n            style.marginLeft = 'auto';\n            style.marginRight = 'auto';\n            style.resize = 'none';\t  \n            \n\t\t\tvar styleContainer = {};\n\t\t\tstyleContainer.borderColor = 'rgba(0, 0, 0, 0.1)';\n\t\t\tstyleContainer.borderWidth = '1px';\n\t\t\tstyleContainer.borderStyle = 'solid';\n\t\t\tstyleContainer.lineHeight = '90%';\n\n\t        return (\n\t\t        <div>\n\t\t        <h1 className=\"text-center\">{this.state.dates[1] + \" - \" + this.state.dates[0] + \" (\" + this.state.spikes.length + \" st)\"}</h1>\n\t\t        <h4 className=\"text-center\">({_descr1})</h4>\n\t\t        <Container fluid={true}>\n                    <Container.Row style={styleContainer}>\n                    <Container.Col  style={{backgroundColor: \"aliceblue\"}}>\n                    <small style={{color: \"lightgray\"}}>Sektorer i topp</small>\n                    <br/>                    \n\t\t        \t{this.getTopSectors()}\n                    </Container.Col>\n                    <Container.Col className=\"text-center\" style={{backgroundColor: \"aliceblue\"}}>\n                    <small style={{color: \"lightgray\"}}>Antal aktier över sma200</small>\n                    <br/>\n\t\t        \t<h1>{this.state.mmth}</h1>\n                    </Container.Col>                    \n                    <Container.Col className=\"text-center\"  style={{backgroundColor: \"aliceblue\"}}>\n                    <small style={{color: \"lightgray\"}}>Fear & Greed</small>\n                    <br/><br/>\n                    {this.getGreedBalls()}\n                    </Container.Col>                    \n                    </Container.Row>\t\t        \t\n\t\t        </Container>\n                <StockChartList symbols={this.state.spikes} sectors={this.state.sectors} tickers={this.state.tickers} callback={this.handleCheck}/>\n                <textarea style={style} name=\"candidates\" rows=\"4\" cols=\"100\" placeholder=\"Kandidater\" value={this.state.tickers} onChange={this.handleChange}></textarea>\n                </div>\n\t        );\n\t    }\n        else if (this.state.error) {\n            // Försök visa felet på något sätt...\n            return <div>{this.state.error.message}</div>\n        }\n\n        else {\n            var image = require('../candidates/images/spinner.gif')\n            var imgStyle = {};\n            imgStyle.marginLeft = 'auto';\n            imgStyle.marginRight = 'auto';\n            imgStyle.display = 'block';\n            return <div style={{position:'absolute', width:'100%',  height:'100%'}}><img style={imgStyle} src={image}></img></div>\n        }\n    }\n}\n\nexport default NagotSomFunkarBattreOmNagotBlirFel;\n","/Users/magnus/GitHub/strecket/src/pages/sell-stock/sell-stock.js",["85","86","87","88","89","90","91"],"import React from \"react\";\nimport Request from \"rest-request\";\n\nimport {Form, Button, Container, Row, Col, Dropdown} from 'react-bootify';\n\nrequire(\"./sell-stock.less\");\n\nconst ReactDOM = require(\"react-dom\");\n\nvar _stockID; \nvar _stockQuote;\nvar _stockAmount;\n\nfunction pad(n) {\n    return n < 10 ? \"0\" + n : n;\n}\n\nfunction getSweDate(a) {\n    var year = a.getFullYear();\n    var month = a.getMonth() + 1;\n    var date = a.getDate();\n\n    var time = year.toString() + \"-\" + pad(month) + \"-\" + pad(date);\n\n    return time;\n}\n\nexport default class Home extends React.Component {\n\t\n    constructor(props) {\n        super(props);\n        \n\t\tvar query = new URLSearchParams(props.location.search);\n\n\t\t_stockID = query.get('id');\n\t\t_stockQuote = query.get('senaste');\n        _stockAmount = query.get('antal');\n        \n        this.url = \"http://85.24.185.150:3000\";\n        this.api = new Request(this.url);\n        \n        this.state = {};\n    }\n\n\tcomponentDidMount() {\n        var self = this;\n        var defaultDate = new Date();        \n        \n\t   \t\n\t\tReactDOM.findDOMNode(self.refs.sellprice).value = _stockQuote;\n\t\tReactDOM.findDOMNode(self.refs.selldate).value = getSweDate(defaultDate);\n\t\tReactDOM.findDOMNode(self.refs.sellamount).value = _stockAmount;\n\t\t\n\t\tReactDOM.findDOMNode(self.refs.sellprice).focus();\n\t   \t\n    }\n\n    onSave(id, date, amount) {\n        var self = this;\n\t    \n        var request = require(\"client-request\");\n\n\t\tvar date   = ReactDOM.findDOMNode(self.refs.selldate).value;\n\t\tvar price  = ReactDOM.findDOMNode(self.refs.sellprice).value;\n\t\tvar amount = ReactDOM.findDOMNode(self.refs.sellamount).value;\n\n        var options = {\n            uri: \"http://85.24.185.150:3000/stocks/\" + _stockID + \"/date/\" + date + \"/price/\" + price + \"/amount/\" + amount,\n            method: \"DELETE\",\n            timeout: 3000,\n            json: true,\n            headers: {\n                \"content-type\": \"application/json\"\n            }\n        };\n\n        var req = request(options, function callback(err, response, body) {\n            if (err) {\n                console.log(err);\n            }\n\n            window.history.back();\n        });\n    }\n\n    onCancel() {\n        window.history.back();\n    }\n\n    handleKeyDown(target) {\n        // Tillåt inte ','\n        if (target.keyCode == 188) target.preventDefault();\n    }\n\n    render() {\n        return (\n            <div id=\"sell_stock\">\n                <Container>\n                    <Form >\n                        <Form.Group row>\n                            <Form.Col sm={{offset:1}}>\n                                <Form.Label tag='h2'>\n                                    Sälj aktie\n                                </Form.Label>\n                            </Form.Col>\n                        </Form.Group>\n\n                        <Form.Group row>\n                            <Form.Col sm={1} textAlign='right' >\n                                <Form.Label inline textColor='muted'>\n                                    <small>Datum</small>\n                                </Form.Label>\n                            </Form.Col>\n                            <Form.Col sm={11}>\n                                <Form.Input padding={{bottom:1}} type=\"text\" ref=\"selldate\"/>\n                            </Form.Col>\n                        </Form.Group>\n                        \n                        <Form.Group row>\n                            <Form.Col sm={1} textAlign='right' >\n                                <Form.Label inline textColor='muted'>\n                                    <small>Pris</small>\n                                </Form.Label>\n                            </Form.Col> \n                            <Form.Col sm={11}>\n                                <Form.Input padding={{bottom:1}} id=\"price\" type=\"text\" ref=\"sellprice\" onKeyDown={this.handleKeyDown} />\n                            </Form.Col>\n                        </Form.Group>\n\n                        <Form.Group row>\n                            <Form.Col sm={1} textAlign='right' >\n                                <Form.Label inline textColor='muted'>\n                                    <small>Sålt antal</small>\n                                </Form.Label>\n                            </Form.Col>\n                            <Form.Col sm={11}>\n                                <Form.Input padding={{bottom:1}} type=\"text\" ref=\"sellamount\"/>\n                            </Form.Col>\n                        </Form.Group>\n\n                        <Form.Group row>\n                            <Form.Col sm={1}>\n                                \n                            </Form.Col>\n                            <Form.Col sm={11}>\n                                <Button color='success' outline onClick={this.onCancel.bind(this)}>\n                                    Avbryt\n                                </Button>\n                                <span>{' '}</span>\n                                <Button color=\"success\" onClick={this.onSave.bind(this)}>\n                                    Spara\n                                </Button>\n                            \n                            </Form.Col>\n    \n                        </Form.Group>\n                    </Form>\n                </Container>\n            </div>\n        );\n    }\n};\n\n","/Users/magnus/GitHub/strecket/src/pages/candidates/candidates.js",["92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107"],"import React from 'react';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport HighchartsMore from 'highcharts/highcharts-more';\n\nif (typeof Highcharts === 'object')\n\tHighchartsMore(Highcharts);\nelse\n\tconsole.log(\"Highcharts är inte ett objekt\");\n\t\n\t\nrequire('./candidates.less');\n\nconst colRealEstate            = '#bbe1fa';\nconst colServices              = '#f0ece2';\nconst colTechnology            = '#a7d129';\nconst colUtilities             = '#ff8ba0';\nconst colFinancialServices     = '#f6e9e9';\nconst colFinancial             = '#ede68a';\nconst colEnergy                = '#a3f7bf';\nconst colBasicMaterials        = '#b9d2d2';\nconst colCommunicationServices = '#5fb9b0';\nconst colConsumerCyclical      = '#eeeeee';\nconst colConsumerDefensive     = '#77abb7';\nconst colHealthcare            = '#B88BF4';\nconst colIndustrials           = '#F2A365';\n\n\nvar series = [];\nvar _pointer = 1;\n\n\nvar options = {\n\n\tchart: {\n        type: 'bubble',\n        backgroundColor: '#121212',\n        \n        animation: {\n\t        duration: 2500,\n\t        easing: 'easeInOutQuint'\t        \n        }        \n    },\n    \n    title: {\n      text: '',\n      style: {\n      \tcolor: 'white',\n\t  \tfontWeight: 'bold',\n\t  \tfontSize: 350,\n\t  \topacity: 0.09\n\n      },\n      align: 'center',\n      verticalAlign: 'middle'\n    },\t         \n    \n    plotOptions: {\n        bubble: {\n            minSize: 20,\n            maxSize: 90\n        }\n    },    \n        \n\t// Hide stuff   \n    legend: {\n\t\tenabled: false    \n    },\n    xAxis: {\n\t\tvisible: false\t\n    },\n    yAxis: {\n\t\tvisible: false\t\t\n    },\n    credits: {\n        enabled: false\n    },\n    tooltip: {\n        enabled: false\n    },    \n    // End hide\n\n    series: [{\n\t    \n        dataLabels: {\n            enabled: true,\n            format: '{point.id}',\n            color: 'white',\n\t\t\ttextOutline: '0px',\n\t\t\tallowOverlap: true,\n            opacity: '10%',\n\t\t\tstyle: {\n\t\t   \t\tfontSize: 9\n\t\t\t}            \n        },\n        \n        animation: {\n\t        duration: 2500,\n\t        easing: 'easeInOutQuint'\t        \n        },\n                \n    }]\n};\n\nfunction setIntervalImmediately(func, interval) {\n  func();\n  return setInterval(func, interval);\n}\n\nexport default class Home extends React.Component {\n\t\n\tgetSectors() {\n\t\t\t\t\n        return new Promise((resolve, reject) => {\t\n\t        var request = require(\"client-request\");\n\t\n\t        var options = {\n\t            uri: \"http://85.24.185.150:3000/sectors\",\n\t            method: \"GET\",\n\t            json: true,\n\t            headers: {\n\t                \"content-type\": \"application/json\"\n\t            }\n\t        };\n\t\n\t        var req = request(options, function(err, response, body) {\n\t            if (!err) {\n\t                resolve(body);\n\t            } else {\n\t            \tconsole.log(\"Err: getSectors:\", err);\n\t                reject(err);\n\t            }\n\t        });\n\t\t});\t\t\n\t\t\n\t}\t\n\t\n    constructor(props) {\n        super(props);\n        \n\t\tthis.state = {loadingFlag: true};\n        \n    }\n    \n\tafterChartCreated(chart) {\n        var self = this;\n        \t\t\n\t\tthis.internalChart = chart;\n\t\t\t\t\n        setIntervalImmediately(function () {\n\t\t\tvar copyOfSeries;\n\t\t\t\n\t\t\tif (!self.state.loadingFlag) {\n\t\t\t\t        \n\t\t\t\tcopyOfSeries = JSON.parse(JSON.stringify(series[_pointer][1]));\n\t\t\t\t\n\t\t\t\tvar d = series[_pointer][0].date;\n\t\t\t\t\n\t\t\t\tself.internalChart.setTitle({text: d.substr(d.length - 2)}, { text: ''}, false);\t\t\t\n\n\t\t\t\tself.internalChart.series[0].setData(copyOfSeries);\n\t\t\t\t\n\t\t\t\t++_pointer;\n\t\t\t\t\n\t\t\t  \tif (_pointer >= series.length) {\n\t\t\t\t  \t\n\t\t\t  \t\t_pointer = 1;\t\t\t\t  \t\n\t\t\t  \t}\n\n\t\t\t}\n\t\t  \t\t\n        }, 2500);\n        \n\t}    \n\n    componentDidMount() {\n\t    var self = this;\n\t    \n        setIntervalImmediately(function () {\n\t\t\tself.getSectors().then(sectorData => {\n\t\t\t\tseries = sectorData.reverse();\n\t\t\t\tconsole.log(\"series\", series);\n\t\t\t\tself.setState({loadingFlag: false});\t\t\t\n\t\t    })\n\t        .catch(error => {\n\t            console.log(\"ERR:getSectors\", error);\n\t        })\n\t\t\t\t  \t\t\n        }, 1000 * 60 * 60 * 24);\n\t    \n    }\n    \n    onCancel() {\n        window.history.back();\n    }\n\n    renderGraphs() {\n        \n        return (\n\t        <div id=\"container\">\n\t            <HighchartsReact containerProps={{ style: { height: \"100%\" } }} highcharts={Highcharts} options={options} callback={this.afterChartCreated}/>\n\t        </div>\n        );\n    }\n\n    render() {\n        var self = this;\n        var image = require('../candidates/images/spinner.gif')\n        var imgStyle = {marginLeft: 'auto', marginRight: 'auto', display: 'block'};\n                \n        if (this.state.loadingFlag)\t    \n\t\t    return (<div style={{position:'absolute', width:'100%',  height:'100%'}}><img style={imgStyle} src={image}></img></div>);\n\t    else\n\t        return (\n\t            <div id=\"container\">\n\t\t\t\t\t{this.renderGraphs()}\n\t            </div>\n\t        )\t    \n    }\n};\n\n","/Users/magnus/GitHub/strecket/src/pages/evaluate/evaluate.js",["108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128"],"import React from \"react\";\nimport {Popover, Button, Container, Table, Row, Col} from 'react-bootify';\nimport isArray from 'yow/isArray';\nimport {Sparklines, SparklinesLine, SparklinesReferenceLine, SparklinesBars} from 'react-sparklines';\nimport {BarChart, Bar, Tooltip} from 'recharts';\nimport PropTypes from 'prop-types';\n\n\nrequire(\"./evaluate.less\");\nvar config = require('../config.js');\n\n\nfunction dayDiff(d) {\n    var dt1 = new Date(d);\n    var dt2 = new Date();\n\n    return Math.floor((Date.UTC(dt2.getFullYear(), dt2.getMonth(), dt2.getDate()) - Date.UTC(dt1.getFullYear(), dt1.getMonth(), dt1.getDate())) / (1000 * 60 * 60 * 24));\n}\n\nfunction pad(n) {\n    return n < 10 ? \"0\" + n : n;\n}\n\nfunction getSweDate(UNIX_timestamp) {\n    var a = new Date(UNIX_timestamp * 1000);\n    var year = a.getFullYear();\n    var month = a.getMonth() + 1;\n    var date = a.getDate();\n\n    if (UNIX_timestamp == null) return \"n/a\";\n\n    var time = year.toString().substr(-2) + pad(month) + pad(date);\n\n    return time;\n}\n\nexport default class Home extends React.Component {\n\t\n    constructor(props) {\n        super(props);\n\n        this.state = {stocks: [], error: \"\"};\n    }\n\n    componentDidMount() {\n        this.fetchStocks();\n    }\n\n    fetchStocks() {\n        var self = this;\n\n        console.log(\"Hämtar sålda aktier...\");\n\n        var request = require(\"client-request\");\n\n        var options = {\n            uri: \"http://85.24.185.150:3000/sold_stocks\",\n            method: \"GET\",\n            json: true,\n            headers: {\n                \"content-type\": \"application/json\"\n            }\n        };\n\n        var req = request(options, function(err, response, body) {\n            if (!err) {\n                self.setState({stocks: body});\n            } else {\n                self.setState({error: err});\n                console.log(err);\n            }\n        });\n    }\n    \n\tgetStoplossInfo(stock) {\t\t\n\t\tif (stock.stoplossTyp == config.stoplossType.StoplossTypeATR)\n\t\t\treturn \"ATR: \" + stock.ATRMultipel;\n\t\telse if (stock.stoplossTyp == config.stoplossType.StoplossTypeQuote)\n\t\t\treturn \"Fast kurs: \" + stock.stoplossKurs;\t\t\n\t\telse if (stock.stoplossTyp == config.stoplossType.StoplossTypePercent)\n\t\t\treturn \"Släpande procent: \" + (stock.stoplossProcent * 100).toFixed(2) + \"%\";\n\t\telse if (stock.stoplossTyp == config.stoplossType.StoplossTypeSMA20)\n\t\t\treturn \"SMA20\";\t\t\n\t\telse\n\t\t\treturn \"Okänd stoploss\";\t\n\t}\n     \n     \n    onCancel() {\n        window.history.back();\n    }    \n\n    renderStocks() {\n        var self = this;\n        var sum = 0;\n\n        var items = this.state.stocks.map(function(stock, index) {\n            if (stock.antal > 0) {\n\t            sum = sum + ((stock.såld_kurs / stock.kurs) - 1);\n                return (\n                    <tr key={index}>\n                        <td>\n\t                        <span >{stock.ticker}</span>\n                        </td>\n                        <td style={{textAlign: \"right\"}}>\n                            <span>{parseFloat(((stock.såld_kurs/stock.kurs)-1) * 100).toFixed(2)}%</span>\n                        </td>\n                        <td style={{textAlign: \"right\"}}>\n                            <span>{stock.max}%</span>\n                        </td>\n                        <td style={{textAlign: \"right\"}}>\n                            <span>{stock.maxdays}</span>\n                        </td>\n                        <td style={{textAlign: \"right\"}}>\n                            <span>{stock.min}%</span>\n                        </td>\n                        <td style={{textAlign: \"right\"}}>\n                            <span>{parseFloat(stock.utfall).toFixed(2)}%</span>\n                        </td>\n\t\t\t\t\t\t<td style={{textAlign: \"center\"}}><Sparklines data={stock.quotes} width={130} height={25} svgWidth={130} svgHeight={30} margin={0}><SparklinesLine color=\"LightSkyBlue\" /></Sparklines></td>                        \n                        <td>\n                            <span>{self.getStoplossInfo(stock)}</span>\n                        </td>                        \n                        <td>\n                            <span>{stock.text}</span>\n                        </td>                        \n                        <td>\n                            <span>{(stock.såld_datum).substring(0, 10)}</span>\n                        </td>                        \n                    </tr>\n                );\n            }\n        }); \n        \n        if (items.length == 0) {\n            if (this.state.error)\n                var items = (\n                    <tr>\n                        <td colSpan=\"9\">\n                            <center>{\"Kan inte nå server: \" + self.state.error.message}</center>\n                        </td>\n                    </tr>\n                );\n            else\n                var items = (\n                    <tr>\n                        <td colSpan=\"9\">\n                            <center>{\"Inga aktier\"}</center>\n                        </td>\n                    </tr>\n                );\n        }\n\n        return (\n            <div>\n                <Table striped={true} bordered={true} responsive={true}>\n                    <thead>\n                        <tr>\n                            <th>Ticker</th>\n                            <th style={{textAlign: \"right\"}}>P/L</th>\n                            <th style={{textAlign: \"right\"}}>Max</th>\n                            <th style={{textAlign: \"right\"}}>d(max)</th>                            \n                            <th style={{textAlign: \"right\"}}>Min</th>                            \n                            <th style={{textAlign: \"right\"}}>Om behållt</th>\n                            <th>Senaste 30</th>\n                            <th>Stoploss</th>\n                            <th>Källa</th>\n                            <th>Såld</th>\n                        </tr>\n                    </thead>\n\n                    <tbody>{items}\n                    <tr><td colSpan=\"9\">{(sum).toFixed(2)}%</td></tr>\n                    </tbody>\n                </Table>\n\n                <br />\n\n            </div>\n        );\n    }\n\n    render() {\n        return (\n            <div id=\"evaluate\">\n                <Container>\n                    <Container.Row>\n                        <br/>\n                    </Container.Row>\n                    <Container.Row>\n                        <Container.Col>\n                            {this.renderStocks()}\n                        </Container.Col>\n                    </Container.Row>\n\n                    <Container.Row>\n                        <Button margin={{left:1, right:1}} color=\"success\" size=\"lg\" onClick={this.onCancel.bind(this)}>\n                            Stäng\n                        </Button>\n                    </Container.Row>\n                </Container>\n            </div>\n        );\n    }\n};\n\n","/Users/magnus/GitHub/strecket/src/pages/new-stock/new-stock.js",["129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190"],"import React from \"react\";\nimport Request from \"rest-request\";\nimport {Form, Button, Container, Row, Col, Dropdown, Card, Tag, Pill, Alert} from 'react-bootify';\n\nrequire(\"./new-stock.less\");\nvar config = require('../config.js');\n\n\nconst _portfolioSize = 5000000;\nconst _maxBuyAmount = 400000;\nconst _risc = 0.25;\nvar _perc = 0.0;\n\nvar _ATR;\nvar _stockID;\nvar _stockQuote;\nvar _sma20 = 0;\nvar _maxkurs = 0;\nvar _xrate = config.rates.rateUSD;\nvar _fxTicker = \"\"; \n\nfunction isNumeric(n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n}\n\n\nfunction pad(n) {\n    return n < 10 ? \"0\" + n : n;\n}\n\n\nfunction getSweDate(UNIX_timestamp) {\n    var a = new Date(UNIX_timestamp * 1000); \n    var year = a.getFullYear();\n    var month = a.getMonth() + 1;\n    var date = a.getDate();\n\n    if (UNIX_timestamp == null) return \"n/a\";\n\n    var time = year.toString().substr(-2) + pad(month) + pad(date);\n\n    return time;\n}\n\nfunction roundUp(num, precision) {\n\tnum = parseFloat(num);\n\tif (!precision)\n\t\treturn num.toLocaleString();\n\t\t\n\treturn Math.ceil(num / precision) * precision;\n}\t\n\n\nfunction unvalidDate(dString) {\n\t// dString -> YYYY-MM-DD\n\t\n\tif (dString.length != 10)\n\t\treturn true;\n\t\t\n\tvar day   = dString.substr(8, 2);\n\tvar month = dString.substr(5, 2);\n\tvar year  = dString.substr(0, 4);\n\t\n\tif (!isNumeric(day) || day < 1) \n    \treturn true;\n    \t\n\tif (!isNumeric(month) || (month < 1) || (month > 12)) \n    \treturn true;\n    \t\n\tif (!isNumeric(year) || (year < 1900) || (year > 2100))\n\t\treturn true;\n\n\tvar lastDayOfMonth = new Date(year, parseInt(month) + 1, -1).getDate();\n\t\t\n\tif (day > lastDayOfMonth)\n\t\treturn true;\n\t\t\n\treturn false;\n}\n\n\nexport default class extends React.Component {\n\t\n    constructor(props) {\n        super(props);\n\n\t\tvar query = new URLSearchParams(props.location.search);\n\n\t\t_stockID = query.get('id');\n\t\t_stockQuote = query.get('senaste');\n\n\t\t/*\n        _stockID = props.location.query.id;\n        _stockQuote = props.location.query.senaste; // Om vi editerar sparad aktie kommer senaste kurs här.\n\t\t*/\n\t\t\n        this.handleKeyPress = this.handleKeyPress.bind(this);\n        this.handleOptionChange = this.handleOptionChange.bind(this);\n        \n        this.state = {focus:'stockticker', helpATR: \"\", helpReport: \"\", helpPercentage: \"\", helpQuote: \"\", title: \"Ange källa\", selectedOption: \"radioATR\", sourceID: null, sources: [], inputs:{}, smaColor:\"light\", showAlert: false};\n    }\n\n\tcomponentDidMount() {\n\t\treturn;\n\n        var self = this;\n        var stoplossOption = \"radioATR\";\n        var helpATR = \"\";\n        var helpQuote = \"\";\n        var sourceText;\n        var request = require(\"client-request\");\n\n        var options = {\n            uri: \"http://85.24.185.150:3000/sources\",\n            method: \"GET\",\n            json: true,\n            headers: {\n                \"content-type\": \"application/json\"\n            }\n        };\n\n        var req = request(options, function(err, response, body) {\n\t    \tif (!err) {\n\t\t    \tvar sources = [];\n\t\t    \tvar i;\n\n\t\t    \tfor (i = 0; i < body.length; i++) {\n\t\t\t    \tsources.push(body[i]);\n\t\t\t\t}\n\t\t\t\tself.setState({sources: sources});\n\n\t\t        // Om vi har ett ID, hämta aktien\n\t\t        if (_stockID != undefined) {\n\t\t\n\t\t            options = {\n\t\t                uri: \"http://85.24.185.150:3000/stock/\" + _stockID,\n\t\t                method: \"GET\",\n\t\t                json: true,\n\t\t                headers: {\n\t\t                    \"content-type\": \"application/json\"\n\t\t                }\n\t\t            };\n\t\t\n\t\t            var req = request(options, function(err, response, body) {\n\t\t                if (!err) {\n\t\t\t\t\t\t\tself.state.inputs.stockticker  = body[0].ticker;  \t\t\n\t\t\t\t\t\t\tself.state.inputs.stockname    = body[0].namn;  \t\t                    \n\t\t\t\t\t\t\tself.state.inputs.stockprice   = body[0].kurs;\n\t\t\t\t\t\t\tself.state.inputs.stockcount   = body[0].antal;\n\t\t\t\t\t\t\tself.state.inputs.stockbuydate = (body[0].köpt_datum).substring(0, 10);\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t_maxkurs                       = body[0].maxkurs; \t\t\n\t\t\t\t\t\t\t_sma20                         = body[0].SMA20; \t\t\n\t\t\n\t\t                    if (body[0].stoplossTyp == config.stoplossType.StoplossTypeATR) {\n\t\t\t\t\t\t\t\tself.state.inputs.atrmultiple = body[0].ATRMultipel;\n\t\t                        stoplossOption = \"radioATR\";\n\t\t\t\t\t\t\t\tself.setPercentageHelp(body[0].ATRMultipel, stoplossOption);\n\t\t                    } else if (body[0].stoplossTyp == config.stoplossType.StoplossTypeQuote) {\n\t\t\t\t\t\t\t\tself.state.inputs.stoplossquote = body[0].stoplossKurs;\n\t\t                        stoplossOption = \"radioQuote\";\n\t\t\t\t\t\t\t\tself.setPercentageHelp(body[0].stoplossKurs, stoplossOption);\t\t                        \n\t\t                    } else if (body[0].stoplossTyp == config.stoplossType.StoplossTypePercent) {\n\t\t\t\t\t\t\t\tself.state.inputs.stoplosspercentage = body[0].stoplossProcent * 100;\n\t\t                        stoplossOption = \"radioPercent\";\n\t\t\t\t\t\t\t\tself.setPercentageHelp(body[0].stoplossProcent, stoplossOption);\t\t                        \n\t\t                    } else {\n\t\t                        stoplossOption = \"radioSMA\";\t\t\t                    \n\t\t\t\t\t\t\t\tself.setPercentageHelp(_sma20, stoplossOption);\t\t                        \t\t                        \n\t\t                    }\n\t\t                    \t\t\t\t\n\t\t                    helpATR = ((body[0].ATR / _stockQuote) * 100).toFixed(2) + \"% (\" + body[0].ATR.toFixed(2) + \")\";\n\t\t                    helpQuote = _stockQuote;\n\t\t\t\t\t\t\tsourceText = sources.find(source => source.id === body[0].källa).text;\n\t\t                    self.setState({helpATR: helpATR, helpQuote: helpQuote, selectedOption: stoplossOption, sourceID: body[0].källa, title: sourceText});\n\t\t                } \n\t\t                else\n\t\t                \tconsole.log(err);\n\t            \t});\n\t\t        } else {\n\t\t            self.setState({helptext: helpATR, selectedOption: stoplossOption});\n\t\t        }\n\t\t\n            } \n            else\n            \tconsole.log(err);\n\t   \t});\n\t   \t\n    }\n    \n    unvalidInput() {\t    \n        if (this.state.selectedOption == \"radioATR\") {\n            if (!(this.state.inputs.atrmultiple != undefined && isNumeric(this.state.inputs.atrmultiple))) {\n                return true;\n            }\n        } else if (this.state.selectedOption == \"radioQuote\") {\n            if (!(this.state.inputs.stoplossquote != undefined && isNumeric(this.state.inputs.stoplossquote))) {\n                return true;\n            }\n        } else if (this.state.selectedOption == \"radioPercent\") { \n        \tif (!(this.state.inputs.stoplosspercentage != undefined && isNumeric(this.state.inputs.stoplosspercentage))) {\n                return true;\n            }\n        }\t    \n\t\n\t\tif (this.state.inputs.stockticker != undefined && this.state.inputs.stockticker.length == 0)\n\t\t\treturn true;\n\n\t\tif (this.state.inputs.stockname != undefined && this.state.inputs.stockname.length == 0)\n\t\t\treturn true;\n\n\t\tif (this.state.inputs.stockprice != undefined && this.state.inputs.stockprice.length == 0)\n\t\t\treturn true;\n\n\t\tif (this.state.inputs.stockcount != undefined && this.state.inputs.stockcount.length == 0)\n\t\t\treturn true;\n\n\t\t// Kolla datum\n\t\tif (this.state.inputs.stockbuydate == undefined)\n\t\t\treturn true;\n\t\t\t\n\t\tif (unvalidDate(this.state.inputs.stockbuydate))\n\t\t\treturn true;\n\t    \n\t\t// Dropdown vald\n\t    if (!isNumeric(this.state.sourceID))\n\t    \treturn true;\n        \t\n        return false;\n    }\n\n    onSave() {\n        var rec = {};\n        var request = require(\"client-request\");\n\n        rec.ticker     = this.state.inputs.stockticker.toUpperCase();\n        rec.namn       = this.state.inputs.stockname;\n        rec.kurs       = this.state.inputs.stockprice;\n        rec.maxkurs    = Math.max(this.state.inputs.stockprice, _maxkurs);\n        rec.antal      = this.state.inputs.stockcount;\n        rec.köpt_datum = (new Date(this.state.inputs.stockbuydate)).toISOString().substr(0, 10); // Dra ut YYYY-MM-DD\n        rec.källa      = this.state.sourceID;\n\n        if (this.state.selectedOption == \"radioATR\") {\n            rec.stoplossTyp = config.stoplossType.StoplossTypeATR;\n            rec.ATRMultipel = this.state.inputs.atrmultiple;\n        } else if (this.state.selectedOption == \"radioQuote\") {\n            rec.stoplossTyp = config.stoplossType.StoplossTypeQuote;\n            rec.stoplossKurs = this.state.inputs.stoplossquote;\n        } else if (this.state.selectedOption == \"radioPercent\") {\n            rec.stoplossTyp = config.stoplossType.StoplossTypePercent;\n            rec.stoplossProcent = this.state.inputs.stoplosspercentage/100;\n        } else {\n            rec.stoplossTyp = config.stoplossType.StoplossTypeSMA20;\n        }\n\n        rec.ATR = _ATR;\n        rec.SMA20 = _sma20;\n\n        var options = {\n            uri: \"http://85.24.185.150:3000/save\",\n            method: \"POST\",\n            body: rec,\n            timeout: 3000,\n            json: true,\n            headers: {\n                \"content-type\": \"application/json\"\n            }\n        };\n\n        var req = request(options, function callback(err, response, body) {\n            if (err) {\n                console.log(err);\n            }\n\n            window.history.back();\n        });\n    }\n\n    onCancel() {\n        window.history.back();\n    }\n\n\tsetPercentageHelp(val, option) {\n\t\t\n\t\tswitch (option) {\n\t\t\tcase \"radioATR\":\n\t\t        _perc = (((_stockQuote/(_stockQuote-val*_ATR))-1)*100).toFixed(2);\n\t\t\t\tbreak;\n\n\t\t\tcase \"radioQuote\":\n\t\t\t\t_perc = (((_stockQuote/val)-1)*100).toFixed(2);\n\t\t\t\tbreak;\n\n\t\t\tcase \"radioPercent\":\n\t\t\t\t_perc = val;\n\t\t\t\tbreak;\n\t\t\t\n\t\t\tcase \"radioSMA\":\n\t\t\t\tif (_sma20 > _stockQuote)\n\t\t\t\t\t_perc = '-';\n\t\t\t\telse\n\t\t\t\t\t_perc = (((_stockQuote/_sma20)-1)*100).toFixed(2);\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.log(\"Fel: setPercentageHelp: Okänd radioknapp\");\n\t\t}\n\t\t\t    \n\t    this.setState({helpPercentage: _perc + \"%\"});\n\t}\n    \n    handleOptionChange(changeEvent) {\n        this.setState({selectedOption: changeEvent.target.value});\n        \n        if (changeEvent.target.value == \"radioATR\")\n\t\t\tthis.setPercentageHelp(this.state.inputs.atrmultiple, changeEvent.target.value);\n        else if (changeEvent.target.value == \"radioQuote\")\n\t\t\tthis.setPercentageHelp(this.state.inputs.stoplossquote, changeEvent.target.value);        \n        else if (changeEvent.target.value == \"radioPercent\")\n\t\t\tthis.setPercentageHelp(this.state.inputs.stoplosspercentage, changeEvent.target.value);\n\t\telse\n\t\t\tthis.setPercentageHelp(null, changeEvent.target.value);\t\t\n    }\n    \n\tonTextChange(event) {\n        var inputs = this.state.inputs;\n\n        // Säkerställ decimaltal '.' på pris, atr-multipel och stoploss\n        if (event.target.id == 'stockprice' || event.target.id == 'atrmultiple' || event.target.id == 'stoplossquote' || event.target.id == 'stoplosspercentage') {\n\t        if (isNaN(event.target.value))\n\t        \tevent.target.value = event.target.value.slice(0, event.target.value.length-1);\n        }\n\n\t\t// Säkerställ heltal på antal\n        if (event.target.id == 'stockcount') {\n\t        if (isNaN(event.target.value) || event.target.value.slice(event.target.value.length-1, event.target.value.length) == '.')\n\t        \tevent.target.value = event.target.value.slice(0, event.target.value.length-1);\n        }\n\n\n        if (event.target.id == 'atrmultiple') {\t        \n\t        if (!Number.isNaN(_stockQuote) && !Number.isNaN(event.target.value) && event.target.value != \"\" && !Number.isNaN(_ATR))\n\t\t        this.setPercentageHelp(event.target.value, 'radioATR');\n\t        else {\n\t\t        _perc = 0.0;\n\t            this.setState({helpPercentage: \"n/a\"});\t\t        \n\t        }\n        }\n        \n        if (event.target.id == 'stoplossquote') {\t        \n\t        if (!Number.isNaN(_stockQuote) && !Number.isNaN(event.target.value) && event.target.value != \"\")\n\t\t        this.setPercentageHelp(event.target.value, 'radioQuote');\t\t        \n\t        else {\n\t\t        _perc = 0.0;\n\t            this.setState({helpPercentage: \"n/a\"});\t\t        \n\t        }\n        }\n        \n        if (event.target.id == 'stoplosspercentage')\n\t\t\tthis.setPercentageHelp(event.target.value, 'radioPercent');\n                \n        inputs[event.target.id] = event.target.value;\n        this.setState({inputs:inputs});\n    }\n\n    handleKeyPress(target) {\n        if (target.key == \"Enter\") {\n            var self = this;\n\n            var request = require(\"client-request\");\n            var ticker = target.currentTarget.value;\n\n            var options = {\n                uri: \"http://85.24.185.150:3000/company/\" + ticker,\n                method: \"GET\",\n                timeout: 1000,\n                json: true,\n                headers: {\n                    \"content-type\": \"application/json\"\n                }\n            };\n\n            var req = request(options, function(err, response, body) {\n                if (!err) {\n                    if (body != null) {\n\t                    if (body[0] != \"getYahooQuote failed.\") {\t\t                    \n\t\t\t\t\t\t\tvar inputs = self.state.inputs;\n\t                        var helpATR;\n\t                        var helpReport;\n\t                        var helpQuote;\n\t        \n\t\t\t\t\t\t\tinputs.stockname = body.price.shortName;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (body.price.currency == 'USD') {\n\t\t\t\t\t\t\t\t_xrate = config.rates.rateUSD;\n\t\t\t\t\t\t\t\t_fxTicker = \" (USD)\";\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (body.price.currency == 'CAD') {\n\t\t\t\t\t\t\t\t_xrate = config.rates.rateCAD;\n\t\t\t\t\t\t\t\t_fxTicker = \" (CAD)\";\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (body.price.currency == 'EUR') {\n\t\t\t\t\t\t\t\t_xrate = config.rates.rateEUR;\n\t\t\t\t\t\t\t\t_fxTicker = \" (EUR)\";\t\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (body.price.currency == 'SEK') {\n\t\t\t\t\t\t\t\t_xrate = 1;\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t_fxTicker = \" (SEK)\";\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\tconsole.log(\"handleKeyPress._xrate=\", _xrate);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tself.setState({inputs:inputs});\n\t\n\t                        _ATR = body.misc.atr14;\n\t\t\t\t\t\t\t_stockQuote = (body.price.regularMarketPrice).toFixed(2);\n\t\t\t\t\t\t\t_sma20 = body.misc.sma20;\n\t\t\t\t\t\t\t\n\t                        helpQuote = _stockQuote;\n\t                        helpATR = ((_ATR/_stockQuote)*100).toFixed(2) + \"% (\" + _ATR + \")\";\n\t                        helpReport = getSweDate(body.calendarEvents.earnings.earningsDate[0]);\n\t                        \n\t\t\t\t\t\t\tself.setState({smaColor: _stockQuote > _sma20 ? \"success\" : \"danger\"});\n\t\t\t\t\t\t\t\t\n\t                        self.setState({helpATR: helpATR, helpReport: helpReport, helpQuote: helpQuote, focus:'stockprice'});\n                        }\n                        else {\n\t                    \tself.setState({showAlert: true});\n                        }\n                    }\n                }\n            });\n        }\n    }\n    \n    setID(source) {\n\t    this.setState({title:source.text, sourceID:source.id});\n    }\n    \n    renderSources() {\n\t\tvar self = this;\n\n\t\tvar items = this.state.sources.map(function(source) {\t\t\t\n\t\t\treturn (\n                <Dropdown.Item key={source.id} onClick={self.setID.bind(self, source)}>\n                    {source.text}\n                </Dropdown.Item>\n            );\n        }); \n        \n        return items;\n    }\n    \n    getBuyAmount() {\n\t    var amountTxt = '-';\n\t    \n\t    if (_perc > 0) {\n\t\t    var amount = _risc*_portfolioSize / Math.abs(_perc);\n\t\t    \n\t\t    if (amount > _maxBuyAmount)\n\t\t    \tamountTxt = _maxBuyAmount.toLocaleString();\n\t\t    else {\n\t\t\t    amount = Math.trunc(Math.round(1000*amount) / 1000);\n\t\t    \tamountTxt = amount.toLocaleString();\n\t\t    }\n\t    }\n\t    \t\n\t    return amountTxt;\n    }\n    \n    getRate () {\t\n\t    var rate = _xrate;\nconsole.log(\"getRate._xrate=\", _xrate);\t    \n\t    if (_xrate == 1)\n\t    \trate = \"\";\n\t    else\n\t    \trate = rate.toFixed(2);\n\t    \t    \n\t    return rate + _fxTicker;\n    }\n    \t    \n    getBuyNumber() {\n\t    var countTxt = '-';\n\t    \n\t    if (_perc > 0) {\n\t\t    var amount = Math.min(_risc*_portfolioSize/Math.abs(_perc), _maxBuyAmount);\n\t\t    var count = Math.trunc((amount/_xrate)/_stockQuote);\n\t\t    \n\t\t    if (count < 100)\n\t\t    \tcount = count;\n\t\t    else if (count < 1000)\n\t\t    \tcount = roundUp(count, 10);\n\t\t    else if (count < 10000)\n\t\t    \tcount = roundUp(count, 100);\n\t\t    else if (count < 100000)\n\t\t    \tcount = roundUp(count, 1000);\n\t\t    else if (count < 1000000)\n\t\t    \tcount = roundUp(count, 10000);\n\t\t    else\n\t\t    \tcount = roundUp(count, 100000);\n\t\t    \n\t\t    countTxt = count.toLocaleString();\t\t    \n\t    }\n\n\t    return countTxt;\t\t    \n    }    \n    \n\tdismissAlert() {\n\t\tthis.setState({showAlert:!this.state.showAlert});\n\t}    \n\n\trender() {\n        return (\n            <div id=\"new_stock\">\n                <Container>\n                    <Form >\n                        <Form.Group row>\n                            <Form.Col sm={{offset:1}}>\n                                <Form.Label tag='h2'>\n                                    Ny aktie\n                                </Form.Label>\n                            </Form.Col>\n                        </Form.Group>\n                        <Form.Group row>\n                            <Form.Col sm={1} textAlign='right' >\n                                <Form.Label inline textColor='muted'>\n                                    <small>Ticker</small>\n                                </Form.Label>\n                            </Form.Col>\n                            <Form.Col sm={11}>\n                                <Form.Input autoFocus={this.state.focus=='stockticker'} disabled={_stockID != undefined} value={this.state.inputs.stockticker} padding={{bottom:1}} type=\"text\" id=\"stockticker\" placeholder=\"Kortnamn för aktien\" onChange={this.onTextChange.bind(this)} onKeyPress={this.handleKeyPress.bind(this)}/>\n\t\t\t\t\t\t\t    <Alert show={this.state.showAlert} dismiss={this.dismissAlert.bind(this)} color='warning'>\n\t\t\t\t\t\t\t        Hittar inte denna ticker.\n\t\t\t\t\t\t\t    </Alert>                                                            \n                            </Form.Col>\n                        </Form.Group>\n                        <Form.Group row>\n                            <Form.Col sm={1} textAlign='right' >\n                                <Form.Label inline textColor='muted'>\n                                    <small>Namn</small>\n                                </Form.Label>\n                            </Form.Col>\n                            <Form.Col sm={11}>\n                                <Form.Input value={this.state.inputs.stockname} padding={{bottom:1}} type=\"text\" id=\"stockname\" placeholder=\"Namnet på aktien\" onChange={this.onTextChange.bind(this)}/>\n                            </Form.Col>\n                        </Form.Group>\n\n                        <Form.Group row>\n                            <Form.Col sm={1} textAlign='right' >\n                                <Form.Label inline textColor='muted'>\n                                    <small>Kurs</small>\n                                </Form.Label>\n                            </Form.Col>\n                            <Form.Col sm={11}>\n                                <Form.Input autoFocus={this.state.focus=='stockprice'} value={this.state.inputs.stockprice} padding={{bottom:1}} type=\"text\" id=\"stockprice\" placeholder=\"Köpt till kursen?\"  onChange={this.onTextChange.bind(this)}/>\n                            </Form.Col>\n                        </Form.Group>\n\n                        <Form.Group row>\n                            <Form.Col sm={1} textAlign='right' >\n                                <Form.Label inline textColor='muted'>\n                                    <small>Antal</small>\n                                </Form.Label>\n                            </Form.Col>\n                            <Form.Col sm={11}>\n                                <Form.Input value={this.state.inputs.stockcount} padding={{bottom:1}} type=\"text\" id=\"stockcount\" placeholder=\"Antal aktier\"  onChange={this.onTextChange.bind(this)}/>\n                            </Form.Col>\n                        </Form.Group>\n\n                        <Form.Group row>\n                            <Form.Col sm={1} textAlign='right' >\n                                <Form.Label inline textColor='muted'>\n                                    <small>Datum</small>\n                                </Form.Label>\n                            </Form.Col>\n                            <Form.Col sm={11}>\n                                 <Form.Input value={this.state.inputs.stockbuydate} padding={{bottom:1}} type=\"text\" id=\"stockbuydate\" placeholder=\"Datum för köp\" onChange={this.onTextChange.bind(this)}/>\n                            </Form.Col>\n                        </Form.Group>\n\n\n                        <Form.Group row>\n                        \n\t                        <Form.Col sm={1} textAlign='right' >\n\t                            <Form.Label inline textColor='muted'>  \n\t                                <small>\n\t                                    Källa\n\t                                </small>\n\t                            </Form.Label>\n\t                        </Form.Col>\n\t                        <Form.Col sm={11}>\n\t                            <Dropdown placement='bottom-start'>\n\t                                <Dropdown.Target>\n\t                                    <Button outline color='secondary'>\n\t                                        {this.state.title == undefined ? 'Välj källa' : this.state.title}\n\t                                    </Button>\n\t                                </Dropdown.Target>\n\t                                <Dropdown.Menu >\n\t\t\t\t\t\t\t\t\t\t{this.renderSources()}\n\t                                </Dropdown.Menu>\n\t                            </Dropdown>\n\t                        </Form.Col>                        \n\n                        </Form.Group>\n\n\t                    <Form.Group>\n\t                        <Form.Row>\n\t                            <Form.Group xs={12} sm={12} md={6}>\n\t                                <Card>\n\t\t\t\t\t\t\t\t        <Card.Header>\n\t\t\t\t\t\t\t\t\t\t\tStop Loss\n\t\t\t\t\t\t\t\t        </Card.Header>                                \n\t                                    <Card.Body>\n\t                                    \n\t\t\t\t\t\t\t\t\t\t<Form inline padding={{vertical:1}}>                                    \t\n\t\t                                    <Form.Radio value=\"radioATR\" checked={this.state.selectedOption === \"radioATR\"} onChange={this.handleOptionChange}>\n\t\t                                        Släpande\n\t\t                                    </Form.Radio>\n\t\t\n\t\t                                    <Form.Input value={this.state.inputs.atrmultiple} margin={{left:2, right:2}} type=\"text\" ref=\"atrmultiple\" id=\"atrmultiple\" placeholder=\"x ATR?\" onChange={this.onTextChange.bind(this)}/>\n\t\t                                </Form>\n\t\n\t\t\t\t\t\t\t\t\t\t<Form inline padding={{vertical:1}}>                                    \t\n\t\t                                    <Form.Radio value=\"radioQuote\" checked={this.state.selectedOption === \"radioQuote\"} onChange={this.handleOptionChange}>\n\t\t                                        Under kurs\n\t\t                                    </Form.Radio>\n\t\t\n\t\t                                    <Form.Input value={this.state.inputs.stoplossquote} margin={{bottom:0, left:2, right:2}} type=\"text\" ref=\"stoplossquote\" id=\"stoplossquote\" placeholder=\"Kurs?\" onChange={this.onTextChange.bind(this)}/>\n\t\t                                </Form>\n\t\t                                                                \n\t\t\t\t\t\t\t\t\t\t<Form inline padding={{vertical:1}}>                                    \t\n\t\t                                    <Form.Radio value=\"radioPercent\" checked={this.state.selectedOption === \"radioPercent\"} onChange={this.handleOptionChange}>\n\t\t                                        Släpande under procent\n\t\t                                    </Form.Radio>\n\t\t                                    <Form.Input  value={this.state.inputs.stoplosspercentage} margin={{left:2, right:2}} type=\"text\" ref=\"stoplosspercentage\" id=\"stoplosspercentage\" placeholder=\"%\" onChange={this.onTextChange.bind(this)}/>\n\t\t\t\t\t\t\t\t\t\t</Form>\n\n\t\t\t\t\t\t\t\t\t\t<Form inline padding={{vertical:1}}>                                    \t\n\t\t                                    <Form.Radio value=\"radioSMA\" checked={this.state.selectedOption === \"radioSMA\"} onChange={this.handleOptionChange}>\n\t\t                                        Släpande under SMA20\n\t\t                                    </Form.Radio>\n\t\t                                    <span className={_stockQuote > _sma20 ? 'badge badge-success' : 'badge badge-danger'} style={{margin: '4px 4px'}}>{_sma20 == 0 ? '-' : _sma20}</span>\n\t\t\t\t\t\t\t\t\t\t</Form>\n\t\t\t\t\t\t\t\t\t\t\n\t                                    </Card.Body>\n\t                                </Card>\n\t                            </Form.Group>\n\t                            <Form.Group xs={12} sm={12} md={6}>\n\t                                <Card>\n\t\t\t\t\t\t\t\t\t\t<Card.Header>\n\t\t\t\t\t\t\t\t\t\tInfo\n\t\t\t\t\t\t\t\t\t\t</Card.Header>\n\t                                    <Card.Body>\n\t\t\t\t\t\t\t\t\t\t\t<Container>\n\t\t\t\t\t\t\t\t\t\t        <Container.Row>\n\t\t\t\t\t\t\t\t\t\t            <Container.Col text=\"info text-right font-weight-light\">Kurs nu</Container.Col>\n\t\t\t\t\t\t\t\t\t\t            <Container.Col>{this.state.helpQuote}</Container.Col>\n\t\t\t\t\t\t\t\t\t\t            <Container.Col text=\"info text-right font-weight-light\">Rapport</Container.Col>\n\t\t\t\t\t\t\t\t\t\t            <Container.Col text=\"float-left\">{this.state.helpReport}</Container.Col>\t\t\t\t\t\t\t\t\t\t            \n\t\t\t\t\t\t\t\t\t\t        </Container.Row>\n\t\t\t\t\t\t\t\t\t\t        <Container.Row>\n\t\t\t\t\t\t\t\t\t\t            <Container.Col text=\"info text-right font-weight-light\">ATR</Container.Col>\n\t\t\t\t\t\t\t\t\t\t            <Container.Col>{this.state.helpATR}</Container.Col>\n\t\t\t\t\t\t\t\t\t\t            <Container.Col text=\"info text-right font-weight-light\">Risk</Container.Col>\n\t\t\t\t\t\t\t\t\t\t            <Container.Col>{this.state.helpPercentage > 0 ? \"-\" + this.state.helpPercentage : this.state.helpPercentage}</Container.Col>\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t        </Container.Row>\n\t\t\t\t\t\t\t\t\t\t        <Container.Row>\n\t\t\t\t\t\t\t\t\t\t            <Container.Col text=\"info text-right font-weight-light\">Köpesumma</Container.Col>\n\t\t\t\t\t\t\t\t\t\t            <Container.Col>{this.getBuyAmount()}</Container.Col>\n\t\t\t\t\t\t\t\t\t\t            <Container.Col text=\"info text-right font-weight-light\">Antal</Container.Col>\n\t\t\t\t\t\t\t\t\t\t            <Container.Col>{this.getBuyNumber()}</Container.Col>\t\t\t\t\t\t\t\t\t\t            \n\t\t\t\t\t\t\t\t\t\t        </Container.Row>\n\t\t\t\t\t\t\t\t\t\t        <Container.Row>\n\t\t\t\t\t\t\t\t\t\t            <Container.Col text=\"info text-right font-weight-light\"><small>Valuta</small></Container.Col>\n\t\t\t\t\t\t\t\t\t\t            <Container.Col><small>{this.getRate()}</small></Container.Col>\n\t\t\t\t\t\t\t\t\t\t            <Container.Col text=\"info text-right font-weight-light\"></Container.Col>\n\t\t\t\t\t\t\t\t\t\t            <Container.Col></Container.Col>\t\t\t\t\t\t\t\t\t\t            \n\t\t\t\t\t\t\t\t\t\t        </Container.Row>\n\t\t\t\t\t\t\t\t\t\t        \n\t\t\t\t\t\t\t\t\t\t    </Container>\t                                    \n\t                                    </Card.Body>\n\t                                </Card>\n\t                            </Form.Group>\n\t                        </Form.Row>\n\t                    </Form.Group>\n\n                        <Form.Group row>\n                        \n                            <Form.Col sm={1}>\n                            \n                            </Form.Col>\n                            \n                            <Form.Col sm={11}>\n                                <Button color='success' outline onClick={this.onCancel.bind(this)}>\n                                    Avbryt\n                                </Button>\n                                <span>{' '}</span>\n                                <Button color=\"success\" onClick={this.onSave.bind(this)} disabled={this.unvalidInput()}>\n                                    Spara\n                                </Button>\n                            \n                            </Form.Col>\n    \n                        </Form.Group>                        \n                                                \n                    </Form>\n                </Container>\n            </div>\n        );\n    }\n};","/Users/magnus/GitHub/strecket/src/pages/home/home.js",["191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211"],"import React from \"react\";\nimport {Popover, Button, Container, Table, Row, Col} from 'react-bootify';\nimport {Sparklines, SparklinesLine, SparklinesReferenceLine, SparklinesBars} from 'react-sparklines';\nimport {BarChart, Bar, Tooltip} from 'recharts';\nimport {Link} from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nrequire(\"./home.less\");\nvar config = require('../config.js');\n\nconst RenderBar = (props) => {\n  const { fill, x, y, width, height } = props;\n  return <rect x={x} y={height>0?y:y+height} width={width} height={Math.abs(height)} stroke=\"none\" fill={height>0?fill:\"lightcoral\"}/>;\n};\n\nRenderBar.propTypes = {\n  fill: PropTypes.string,\n  x: PropTypes.number, \n  y: PropTypes.number,\n  width: PropTypes.number,\n  height: PropTypes.number,\n};\n\n\nfunction dayDiffPosix(UNIX_timestamp) {\n    var dt1 = new Date(UNIX_timestamp * 1000);\n    var dt2 = new Date();\n    \n    if (UNIX_timestamp == null) return \"n/a\";    \n    \n    return Math.floor((Date.UTC(dt1.getFullYear(), dt1.getMonth(), dt1.getDate()) - Date.UTC(dt2.getFullYear(), dt2.getMonth(), dt2.getDate())) / (1000 * 60 * 60 * 24));\n}\n\n\nfunction dayDiff(d) {\n    var dt1 = new Date(d);\n    var dt2 = new Date();\n    \n    \n    if (d == null) return \"n/a\";    \n    \n    return Math.floor((Date.UTC(dt2.getFullYear(), dt2.getMonth(), dt2.getDate()) - Date.UTC(dt1.getFullYear(), dt1.getMonth(), dt1.getDate())) / (1000 * 60 * 60 * 24));\n}\n\nfunction pad(n) {\n    return n < 10 ? \"0\" + n : n;\n}\n\n// Format date to: YYMMDD\nfunction getSweDate(UNIX_timestamp) {\n    var a = new Date(UNIX_timestamp * 1000);\n    var year = a.getFullYear();\n    var month = a.getMonth() + 1;\n    var date = a.getDate();\n\n    if (UNIX_timestamp == null) return \"n/a\";\n\n    var time = year.toString().substr(-2) + pad(month) + pad(date);\n\n    return time;\n}\n\nexport default class extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {stocks: [], error: \"\"};\n    }\n\n    componentDidMount() {\n       this.fetchStocks();\n    }\n\n    fetchStocks() {\n        var self = this;\n\n        console.log(\"Hämtar aktiekurser...\");\n\n        var request = require(\"client-request\");\n\n        var options = {\n            uri: \"http://85.24.185.150:3000/stocks\",\n            method: \"GET\",\n            json: true,\n            headers: {\n                \"content-type\": \"application/json\"\n            }\n        };\n\n        var req = request(options, function(err, response, body) {\n            if (!err) {\n                self.setState({stocks: body});\n            } else {\n                self.setState({error: err});\n                console.log(err);\n            }\n        });\n    }\n\n    getColor(percentage) {\n        const green5 = {backgroundColor: \"#00610e\"};\n        const green4 = {backgroundColor: \"#3d860b\"};\n        const green3 = {backgroundColor: \"#34a203\"};\n        const green2 = {backgroundColor: \"#6ec007\"};\n        const green1 = {backgroundColor: \"#c1d11f\"};\n        const red1 = {backgroundColor: \"#ffb5b5\"};\n        const red2 = {backgroundColor: \"#ff9393\"};\n        const red3 = {backgroundColor: \"#ff6a6a\"};\n        const red4 = {backgroundColor: \"#ff3e3e\"};\n        const red5 = {backgroundColor: \"#ff2d2d\"};\n\n        var p = parseFloat(percentage);\n\n        if (p > 20) return green5;\n\n        if (p > 15) return green4;\n\n        if (p > 10) return green3;\n\n        if (p > 5) return green2;\n\n        if (p > 0) return green1;\n\n        if (p > -5) return red1;\n\n        if (p > -10) return red2;\n\n        if (p > -15) return red3;\n\n        if (p > -20) return red4;\n        \n        else return red5;\n    }\n    \n\tgetStopLossInfo(stock) {\n\t\tvar stoplossTxt = \"\";\n\t\t\n\t\tswitch (stock.stoplossTyp) {\n\t\t\tcase config.stoplossType.StoplossTypeSMA20:\n\t\t\t\tstoplossTxt = stock.sma20 + ' (sma20)';\n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\tcase config.stoplossType.StoplossTypePercent:\n\t\t\t\tstoplossTxt = (stock.maxkurs - (stock.maxkurs * stock.stoplossProcent)).toFixed(2) + ' (' + (stock.stoplossProcent * 100).toFixed(2) + '%)';\n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\tcase config.stoplossType.StoplossTypeQuote:\n\t\t\t\tstoplossTxt = stock.stoplossKurs  + ' (fk)';\n\t\t\t\tbreak;\n\n\t\t\tcase config.stoplossType.StoplossTypeATR:\n\t\t\t\tstoplossTxt = (stock.atrStoploss).toFixed(2) + ' (atr' + stock.ATRMultipel + '*' + stock.ATR + ')';\n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\tdefault:\n\t\t\t\tstoplossTxt = 'Okänd stoploss';\n\t\t}\n\t\t\n\t\treturn stoplossTxt;\n\t\t\n\t}\n    \n    renderStocks() {\n        var self = this;\n        var earningsDateDiff;\n\n        var items = this.state.stocks.map(function(stock, index) {\n            if (stock.antal > 0) {\n\t\t\t\tearningsDateDiff = dayDiffPosix(stock.earningsDate[0]);\t            \n                return (\n                    <tr key={index}>\n                        <td>\n                            <Popover placement='bottom-start' >\n                                <Popover.Target>\n                                    <span >{stock.ticker}</span>\n                                </Popover.Target>\n                                <Popover.Header> \n                                    {stock.namn}\n                                </Popover.Header>\n                                <Popover.Body>\n                                    {stock.sector}\n                                </Popover.Body>\n                            </Popover>                            \n                        </td>\n                        <td style={{textAlign: \"right\"}}>\n                            {parseFloat(stock.senaste).toFixed(2)}\n                            <span style={{color: \"#b2b2b2\"}}> ({parseFloat(stock.kurs).toFixed(2)})</span>\n                        </td>\n                        <td style={{textAlign: \"right\"}}>\n                            {parseFloat(stock.utfall).toFixed(2)}\n                            <span style={{color: \"#b2b2b2\"}}> ({parseFloat(((stock.maxkurs/stock.kurs)-1) * 100).toFixed(2)})</span>\n                        </td>\n                        <td>\n\t\t\t\t\t\t\t<BarChart width={130} height={30} margin={{top: 0, right: 0, left: 0, bottom: 0}} barGap={1} data={stock.spyProgress}>\n\t\t\t\t\t\t\t\t<Bar dataKey=\"value\" fill='mediumseagreen' shape={<RenderBar/>}/>\n\t\t\t\t\t\t\t\t<Tooltip labelFormatter={(index) => (stock.spyProgress[index].name).slice(0, 10)} formatter={(value) => value.toFixed(2)+'%'}/>\n\t\t\t\t\t\t\t</BarChart>\n                        </td>\n                        {stock.sma20 != -1 ? (\n                            <td style={self.getColor(parseFloat((1 - stock.sma20 / stock.senaste) * 100).toFixed(2))}>{}</td>\n                        ) : (\n                            <td style={{backgroundColor: \"#f2f2a4\"}}>{}</td>\n                        )}\n                        {stock.sma50 != -1 ? (\n                            <td style={self.getColor(parseFloat((1 - stock.sma50 / stock.senaste) * 100).toFixed(2))}>{}</td>\n                        ) : (\n                            <td style={{backgroundColor: \"#f2f2a4\"}}>{}</td>\n                        )}\n                        {stock.sma200 != -1 ? (\n                            <td style={self.getColor(parseFloat((1 - stock.sma200 / stock.senaste) * 100).toFixed(2))}>{}</td>\n                        ) : (\n                            <td style={{backgroundColor: \"#f2f2a4\"}}>{}</td>\n                        )}\n                        <td style={{textAlign: \"right\"}}>{self.getStopLossInfo(stock)}</td>   \n                        {stock.larm == 1 ? (\n                            <td>\n                                <center>\n                                    <span className='badge badge-danger'>Larm</span>\n                                </center>\n                            </td>\n                        ) : (\n\t                        <td>\n                            </td>\n                        )}\n                        <td>\n                            <center>\n                                <Button size=\"sm\" className=\"btn btn-secondary\" href={\"#sell-stock/?id=\" + stock.id + \"&senaste=\" + stock.senaste + \"&antal=\" + stock.antal}>\n                                    Sälj\n                                </Button>\n                            </center>\n                        </td>\n                        <td>\n                            <center>\n                                <Button size=\"sm\" className=\"btn btn-secondary\" href={\"#new-stock/?id=\" + stock.id + \"&senaste=\" + stock.senaste}>\n                                    Ändra\n                                </Button>\n                            </center>\n                        </td>\n                        {stock.utfall > 0 && dayDiff(stock.köpt_datum) > 0 ? (\n                            <td style={{textAlign: \"right\"}}>\n                                <span style={{color: \"#b2b2b2\"}}>\n                                    <small>\n                                        {((stock.utfall / dayDiff(stock.köpt_datum)) * 365).toFixed(0)}\n                                        %, {dayDiff(stock.köpt_datum)}\n                                        d, ({stock.utdelning != null ? Number(stock.utdelning).toFixed(2) : \"n/a\"})\n                                    </small>\n                                </span>\n                            </td>\n                        ) : (\n                            <td style={{textAlign: \"right\"}}>\n                                <span style={{color: \"#b2b2b2\"}}>\n                                    <small>-, {dayDiff(stock.köpt_datum)}d, ({stock.utdelning != null ? Number(stock.utdelning).toFixed(2) : \"n/a\"})</small>\n                                </span>\n                            </td>\n                        )}\n\n                        {(earningsDateDiff == \"n/a\" || earningsDateDiff >= 5) ? (\n\t\t\t\t\t\t\t<td>{getSweDate(stock.earningsDate[0])}</td>\n                        ) : earningsDateDiff < 0 ? (\n\t\t\t\t\t\t\t<td style={{color: \"gray\"}}>{getSweDate(stock.earningsDate[0])}</td>\n                        ) : (\n\t\t\t\t\t\t\t<td style={{color: \"red\"}}>{getSweDate(stock.earningsDate[0])}</td>\n                        )}\n                    </tr>\n                );\n            }\n        }); \n\n        var rates = this.state.stocks.map(function(stock, index) {\n\t        \n\t        if (stock.namn == \"USD\")\n\t        \tconfig.rates.rateUSD = stock.senaste;\n\t        \t\n\t        if (stock.namn == \"CAD\")\n\t        \tconfig.rates.rateCAD = stock.senaste;\n\t        \t\n\t        if (stock.namn == \"EUR\")\n\t        \tconfig.rates.rateEUR = stock.senaste;\n\t        \n            if (stock.antal == -1) {\n                return (\n                    <tr key={index}>\n                        <td>{stock.namn}</td>\n                        <td style={{textAlign: \"right\"}}>{parseFloat(stock.senaste).toFixed(2)}</td>\n\t\t\t\t<td style={{textAlign: \"center\"}}><Sparklines data={stock.quotes} width={130} height={25} svgWidth={130} svgHeight={30} margin={0}><SparklinesLine color=\"LightSkyBlue\" /></Sparklines></td>\n                        <td style={self.getColor(parseFloat((1 - stock.sma50 / stock.senaste) * 100).toFixed(2))}>{}</td>\n                        <td style={self.getColor(parseFloat((1 - stock.sma200 / stock.senaste) * 100).toFixed(2))}>{}</td>\n                    </tr>\n                );\n            }\n        });\n\n        if (items.length == 0) {\n            if (this.state.error)\n                var items = (\n                    <tr>\n                        <td colSpan=\"13\">\n                            <center>{\"Kan inte nå servern: \" + self.state.error.message}</center>\n                        </td>\n                    </tr>\n                );\n            else\n                var items = (\n                    <tr>\n                        <td colSpan=\"13\">\n                            <center>{\"Inga aktier\"}</center>\n                        </td>\n                    </tr>\n                );\n        }\n\n        return (\n            <div>\n                <Table striped={true} bordered={true} responsive={true}>\n                    <thead>\n                        <tr>\n                            <th>Ticker</th>\n                            <th style={{textAlign: \"right\"}}>Kurs</th>\n                            <th style={{textAlign: \"center\"}}>% (max)</th>\n                            <th style={{textAlign: \"center\"}}>vs SPY</th>\n                            <th style={{textAlign: \"center\"}}>ma20</th>\n                            <th style={{textAlign: \"center\"}}>ma50</th>\n                            <th style={{textAlign: \"center\"}}>ma200</th>\n                            <th style={{textAlign: \"right\"}}>S/L</th>\n                            <th />\n                            <th />\n                            <th />\n                            <th style={{textAlign: \"right\"}}>p/y, days, (yield)</th>\n                            <th>Rapport</th>\n                        </tr>\n                    </thead>\n\n                    <tbody>{items}</tbody> \n                </Table>\n\n                <br />\n\n                <Table striped={true} bordered={true} responsive={true}>\n                    <thead>\n                        <tr>\n                            <th>Valuta</th>\n                            <th style={{textAlign: \"right\"}}>Kurs</th>\n                            <th style={{textAlign: \"center\"}}>Graf</th>\n                            <th style={{textAlign: \"center\"}}>ma50</th>\n                            <th style={{textAlign: \"center\"}}>ma200</th>\n                        </tr>\n                    </thead>\n\n                    <tbody>{rates}</tbody>\n                </Table>\n            </div>\n        );\n    }\n\n\txrender() {\n\t\tconsole.log('Rendering HEJ');\n\t\treturn (\n\t\t\t<h1>\n\t\t\t\tHEJ\n\t\t\t</h1>\n\t\t);\n\t}\n    render() {\n        return (\n            <div id=\"home\">\n                <Container fluid={true}>\n                    <Container.Row>\n                        <br/>\n                    </Container.Row>\n                    <Container.Row>\n                        <Container.Col>\n                            {this.renderStocks()}\n                        </Container.Col>\n                    </Container.Row>\n\n                    <Container.Row>\n\t\t\t\t\t\t<Button margin={{left:1, right:1}} color=\"success\" size=\"lg\" href=\"#new-stock\">\n\t\t\t\t\t\t\tNytt köp\n\t\t\t\t\t\t</Button>\n\n                        <span>{' '}</span>\n                        <Button margin={{left:1, right:1}} className=\"btn-warning\" size=\"lg\" href=\"#meg\">\n                            Kandidater\n                        </Button>\n                        <span>{' '}</span>\n                        <Button margin={{left:1, right:1}} className=\"btn-warning\" size=\"lg\" href=\"#evaluate\">\n                            Utvärdera\n                        </Button>\n                        <span>{' '}</span>\n                        <Button margin={{left:1, right:1}} className=\"btn-danger\" size=\"lg\" href=\"#looker\">\n                            Leta\n                        </Button>\n                        <span>{'       '}</span>\n                        <Button margin={{left:1, right:1}} className=\"btn-warning\" size=\"lg\" href=\"#candidates\">\n                            Bubbles\n                        </Button>\n                        \n                    </Container.Row>\n                </Container>\n            </div>\n        );\n    }\n};\n\n","/Users/magnus/GitHub/strecket/src/pages/looker/looker.js",["212","213","214","215","216","217","218","219","220","221","222"],"import React from \"react\";\nimport {Popover, Button, Container, Table, Row, Col, Badge} from 'react-bootify';\nimport isArray from 'yow/isArray';\nimport PropTypes from 'prop-types';\nimport Request from \"yow/request\";\n\nrequire(\"./looker.less\");\n\nconst increaseLimit = 0.10; // Hur många procent den måste öka varje kvartal\n\nexport default  class Home extends React.Component {\n\t    \n    getIncreaseLimit() {\n\t    return (increaseLimit * 100).toFixed(0);\n    }\n\t\n    constructor(props) {\n        super(props);\n\n        this.state = {stocks:[], busy:false};\n    }\n    \n    \n    fetch(symbol) {\n        return new Promise((resolve, reject) => {\n\n            var request = new Request(\"http://85.24.185.150:3000\");\n\n            request\n                .get(\"/rawdump/\" + symbol)\n                .then(response => {\n                    resolve(response.body);\n                })\n                .catch(error => {\n\t                console.log(\"FEL: fetch:\", error);\n                    reject(error);\n                });\n        });\n    }\n    \n        \n    componentDidMount() {\n        var self = this;\n        var request = new Request('http://85.24.185.150:3000');\n        var query = {};\n        var stocks;\n        \n        query.sql = 'select symbol from stocks';\n\n        request.get('/mysql', {query:query}).then(response => {\n\t            \n            stocks = response.body;\n            \n            var loop = (index) => {\n                if (index < stocks.length) {\n                    self.fetch(stocks[index].symbol).then(rawDump => {\n\t\t\t\t\t\tif (typeof rawDump !== 'undefined' && rawDump != '[]') {\t\t\n\t\t\t\t\t\t\tif (typeof rawDump.earnings !== 'undefined' && rawDump.earnings != '[]') {\t\t\n\t\t\t\t\t\t\t\tif (typeof rawDump.earnings.financialsChart.quarterly !== 'undefined' && rawDump.earnings.financialsChart.quarterly.length == 4) {\n\t\t\t\t\t\t\t\t\tvar incr1, incr2, incr3;\n\t\t\t\t\t\t\t\t\tvar incr1Revenue, incr2Revenue, incr3Revenue;\n\t\t\t\t\t\t\t\t\tvar fcf;\n\t\t\t\t\t\t\t\t\tvar noStocks;\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tvar q = rawDump.earnings.financialsChart.quarterly;\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tconsole.log(\"---Ticker:\", rawDump.price.symbol);\n\t\t\t\t\t\t\t\t\tconsole.log(\"earnings=\", q[0].earnings, q[1].earnings, q[2].earnings, q[3].earnings);\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tif (q[0].earnings > 0 && q[1].earnings > 0 && q[2].earnings > 0 && q[3].earnings > 0) {\n\t\t\t\t\t\t\t\t\t\tincr1 = (q[1].earnings / q[0].earnings) - 1;\n\t\t\t\t\t\t\t\t\t\tincr2 = (q[2].earnings / q[1].earnings) - 1;\n\t\t\t\t\t\t\t\t\t\tincr3 = (q[3].earnings / q[2].earnings) - 1;\t\t\t\t\t\t\n\n\t\t\t\t\t\t\t\t\t\tincr1Revenue = (q[1].revenue / q[0].revenue) - 1;\n\t\t\t\t\t\t\t\t\t\tincr2Revenue = (q[2].revenue / q[1].revenue) - 1;\n\t\t\t\t\t\t\t\t\t\tincr3Revenue = (q[3].revenue / q[2].revenue) - 1;\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tconsole.log(\"increase earnings=\", incr1.toFixed(2), incr2.toFixed(2), incr3.toFixed(2));\n\t\t\t\t\t\t\t\t\t\tconsole.log(\"increase revenue=\", incr1Revenue.toFixed(2), incr2Revenue.toFixed(2), incr3Revenue.toFixed(2));\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tif (typeof rawDump.financialData !== 'undefined') {\n\t\t\t\t\t\t\t\t\t\t\tconsole.log(\"cashflow\", rawDump.financialData.freeCashflow);\n\t\t\t\t\t\t\t\t\t\t\tfcf = rawDump.financialData.freeCashflow;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tif (typeof rawDump.defaultKeyStatistics !== 'undefined') {\n\t\t\t\t\t\t\t\t\t\t\tconsole.log(\"shares\", rawDump.defaultKeyStatistics.sharesOutstanding);\n\t\t\t\t\t\t\t\t\t\t\tnoStocks = rawDump.defaultKeyStatistics.sharesOutstanding;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t// Växer varje kvartal\n\t\t\t\t\t\t\t\t\t\tvar grows = (incr3Revenue > incr2Revenue && incr2Revenue > incr1Revenue);\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tif (incr1 > increaseLimit && incr2 > increaseLimit && incr3 > increaseLimit) {\n\t\t\t\t\t\t\t\t\t\t\tvar candidate = {ticker:rawDump.price.symbol, incr1:incr1, incr2:incr2, incr3:incr3, incr1Revenue:incr1Revenue, incr2Revenue:incr2Revenue, incr3Revenue:incr3Revenue, grows:grows, fcf:fcf, noStocks:noStocks};\n\n\t\t\t\t\t\t\t\t\t\t\tself.setState({stocks: this.state.stocks.concat(candidate)});\t\n\t\t\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\tconsole.log(\"---Ticker:\", rawDump.price.symbol, \" kvartalsresultat saknas.\");\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t            \t\t\t            \n                        loop(index + 1);\n                    })\n                    .catch((error) => {\n                        console.log(\"FEL: från fetch:\", error);\n                    });\n                }\n                else {\n\t                console.log(\"Done!\");\n                }    \n            };\n    \n            loop(0);            \n            \n        })\n        .catch(error => {\n            console.error(error.message);\n        });\n\t\t\t\t\n    }\n        \n    onCancel() {\n        window.history.back();\n    }\n    \n    \n    renderStocks() {\n        var self = this;\n\n        var items = this.state.stocks.map(function(stock, index) {\n            return (\n                <tr key={index}>\n                    <td>\n                    \t{stock.ticker}\n                    </td>\n                    <td style={{textAlign: \"right\"}}>\n                        {(stock.incr1*100).toFixed(2)+'%'}\n                    </td>\n                    <td style={{textAlign: \"right\"}}>\n                        {(stock.incr2*100).toFixed(2)+'%'}\n                    </td>\n                    <td style={{textAlign: \"right\"}}>\n                        {(stock.incr3*100).toFixed(2)+'%'}\n                    </td>                    \n                    <td style={{textAlign: \"right\"}}>\n                        {(stock.incr1Revenue*100).toFixed(2)+'%'}\n                    </td>                    \n                    <td style={{textAlign: \"right\"}}>\n                        {(stock.incr2Revenue*100).toFixed(2)+'%'}\n                    </td>                    \n                    <td style={{textAlign: \"right\"}}>\n                        {(stock.incr3Revenue*100).toFixed(2)+'%'}\n                    </td>                    \n                    <td style={{textAlign: \"right\"}}>\n                        {stock.fcf}\n                    </td>                    \n                    <td style={{textAlign: \"right\"}}>\n                        {stock.noStocks}\n                    </td>                                        \n                    <td style={{textAlign: \"center\"}}>\n                        {stock.grows ? (\n\t                        <Badge color=\"success\">Växer</Badge>\n\t                    ):(\n\t\t                  <div></div>  \n\t                    )}\n                    </td>\n\n                </tr>\n            );\n        }); \n\n        if (items.length == 0) {\n            if (this.state.error)\n                var items = (\n                    <tr>\n                        <td colSpan=\"10\">\n                            <center>{\"Kan inte nå servern: \" + self.state.error.message}</center>\n                        </td>\n                    </tr>\n                );\n            else\n                var items = (\n                    <tr>\n                        <td colSpan=\"10\">\n                            <center>{\"Inga aktier\"}</center>\n                        </td>\n                    </tr>\n                );\n        }\n\n        return (\n            <div>\n                <Table striped={true} bordered={true} responsive={true}>\n                    <thead>\n                        <tr>\n                        \t<td colSpan=\"10\">\n                            \t<center><h1>Mer än {this.getIncreaseLimit() + \"% ökning per kvartal\"}</h1></center>\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t</tr>\n\n                        <tr>\n                            <th>Ticker</th>\n                            <th style={{textAlign: \"right\"}}>Ökning vinst q1</th>\n                            <th style={{textAlign: \"right\"}}>Ökning vinst q2</th>\n                            <th style={{textAlign: \"right\"}}>Ökning vinst q3</th>\n                            <th style={{textAlign: \"right\"}}>Ökning omsättning q1</th>\n                            <th style={{textAlign: \"right\"}}>Ökning omsättning q2</th>\n                            <th style={{textAlign: \"right\"}}>Ökning omsättning q3</th>\n                            <th style={{textAlign: \"right\"}}>Fcf</th>\n                            <th style={{textAlign: \"right\"}}>Antal aktier</th>                                                        \n                            <th>Växer varje kvartal</th>\n                        </tr>\n                    </thead>\n\n                    <tbody>{items}</tbody>\n                </Table>\n\n            </div>\n        );\n    }\n    \n\n    render() {\n        return (\n            <div id=\"looker\">\n                <Container>\n                    <Container.Row>\n                        <br/>\n                    </Container.Row>\n                    <Container.Row>\n                        <Container.Col>\n                            {this.renderStocks()}\n                        </Container.Col>\n                    </Container.Row>\n\n                    <Container.Row>\n                        <Button margin={{left:1, right:1}} color=\"success\" size=\"lg\" onClick={this.onCancel.bind(this)}>\n                            Stäng\n                        </Button>\n                    </Container.Row>\n                </Container>\n            </div>\n        );\n    }\n};\n\n","/Users/magnus/GitHub/strecket/src/pages/meg/stock-chart-list.js",["223","224"],"import React from 'react';\nimport StockChart from './stock-chart.js';\n\n\nexport default class StockChartList extends React.Component {\n\n    constructor(args) {\n        super(args);\n    }\n    \n\tshouldComponentUpdate(nextProps, nextState) {\n\t\treturn nextProps.tickers == \"\";\n\t}    \n    \n    render() {\n        var children = this.props.symbols.map((symbol, index) => {\n            return (\n\t        \t<StockChart key={index} symbol={symbol} sectors={this.props.sectors} callback={this.props.callback}></StockChart>\n            );\n        });\n\n        return (\n            <div>\n                {children}\n            </div>\n        );\n    }\n}\n","/Users/magnus/GitHub/strecket/src/pages/config.js",[],"/Users/magnus/GitHub/strecket/src/pages/meg/stock-chart.js",["225","226","227"],"import React from 'react';\nimport Highcharts from 'highcharts/highstock';\nimport HighchartsReact from 'highcharts-react-official';\nimport Indicators from 'highcharts/indicators/indicators';\nimport {Button, Form} from 'react-bootify';\n\n\nimport Request from 'yow/request';\nimport sprintf from 'yow/sprintf';\nimport InfoBox from './info-box.js';\n\nIndicators(Highcharts);\n\nexport default class StockChart extends React.Component {\n\n    constructor(args) {\n        super(args);\n\n        this.state = {\n\t        ready: false,\t\n\t        config: {},\n\t        atr: 0,\n\t        drops: []\n        };\n\n\t\tthis.onClick = this.onClick.bind(this);\n    }\n    \n    // Anropas efter konponenten är skapad och finns i DOM:en\n    componentDidMount() {\n        this.generate();\n    }\n\n    generate() {\n        // Deklarera en request som går direkt till Munch (slipper då MySQL-anrop)\n        var request = new Request('http://85.24.185.150:3000');\n\n        // Nu och då\n        var now = new Date();\n        var then = new Date();\n\t\tvar oneYearAgo = new Date();\n\n        // Då är två år tillbaka i tiden, vi hämtar 2 år men visar 1, pga SMA200 visas inte korrekt annars\n        then.setFullYear(now.getFullYear() - 2);\n        \n        // Håll koll på ett år tillbaks, vi visar bara ett år i grafen\n        oneYearAgo.setFullYear(now.getFullYear() - 1);\n\n        // Skapa läsbara texter från nu och då\n        var nowYMD  = sprintf('%04d-%02d-%02d', now.getFullYear(), now.getMonth() + 1, now.getDate());\n        var thenYMD = sprintf('%04d-%02d-%02d', then.getFullYear(), then.getMonth() + 1, then.getDate());\n        var yearAgoYMD = sprintf('%04d-%02d-%02d', oneYearAgo.getFullYear(), oneYearAgo.getMonth() + 1, oneYearAgo.getDate());\n\n        // Skapa frågan\n        var query = {};\n        query.sql        = 'select date, open, high, low, close, volume from quotes where symbol = ? and date >= ?';\n        query.values     = [this.props.symbol, thenYMD];\n\t\tvar _symb = this.props.symbol;\n        var data = [];\n        var volume = [];\n\n        // Hämta data från Munch via ett '/mysql' anrop...\n        request.get('/mysql', {query:query}).then(response => {\n            var stocks = response.body;\n            var prevClose;\n            var maxP = 0;\n            var minP = 0;\n            var directionFlip = false;\n            var drops = [];\n            var drop;\n\t\t\tvar atr = 0;\n\t\t\tvar previousValue = 0;\n            \n            const atrPeriod = 14; // ATR calculated for 14 days\n\n            // Lägg till i vektorn 'data' på det format som Highcharts vill ha det\n            stocks.forEach((stock, index) => {\n                var date = new Date(stock.date);\n                data.push([Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()), stock.open, stock.high, stock.low, stock.close, stock.volume]);\n                volume.push([Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()), stock.volume]);\n                \n                \n                // Calculate ATR\n                if (stocks.length-index < atrPeriod+1) {\t                \n\t                atr = atr + Math.max(stock.high-stock.low, Math.abs(stock.high-prevClose), Math.abs(stock.low-prevClose));\n\t                prevClose = stock.close;\t                \n                }\n                else\n\t                prevClose = stock.close;           \n\t                \n\t            // Calculate maxdrop\n\t            if (stocks.length-index < 100) {\n//console.log(\"Kollar \", stock.date, stock.close);\t\t            \n\t\t            if (directionFlip && stock.close > maxP) {\n//\t\t\t            console.log(\"Ny max efter flip\", ((1 - (maxP/minP))*100).toFixed(2) + \"%\");\n\t\t\t            drop = ((1 - (maxP/minP))*100).toFixed(2);\n\t\t\t            drops.push(drop);\n\t\t            \tmaxP = stock.close;\n\t\t            \tminP = 0;\n\t\t            \tdirectionFlip = false;\n\t\t            } else if (stock.close > maxP) {\n\t\t            \tmaxP = stock.close;\n//\t\t\t            console.log(\"Nytt max\", maxP);\n\t\t            }\n\t\t            else if (minP == 0 || stock.close < minP) {\n\t\t            \tminP = stock.close;\t\t\t            \n//\t\t\t            console.log(\"Nytt min\", minP);\t\t\t             \n\t\t            \tdirectionFlip = true;\n\t\t            }\n\t\t\t\t\t\n\t\t\t\t}\t            \n                \n            });\n// console.log(\"---\", _symb, drops, Math.min.apply(null, drops));             \n            atr = atr / atrPeriod;\n\n            // Skapa en Highcharts 'config'...\n            var config = {\n              title: {\n                text: this.props.symbol\n              },\n\n              subtitle: {\n                  text: sprintf('%s - %s', yearAgoYMD, nowYMD)\n              },\n\n\t\t\t  chart: {\n\t\t\t    height: (9 / 16 * 100) + '%',\n\t\t\t    panning: false, \n\t\t\t    \n\t\t\t\t events: {\n\t\t            click: function (event) {\n\t\t\t            if (previousValue != 0) {\n\t\t\t\t\t\t\tvar label = this.renderer.label(\n\t\t\t\t            \t((event.yAxis[0].value/previousValue - 1)*100).toFixed(2) + '%',\n\t\t\t                    event.xAxis[0].axis.toPixels(event.xAxis[0].value),\n\t\t\t                    event.yAxis[0].axis.toPixels(event.yAxis[0].value)\t\t\t\t\t            \n\t\t\t                )\n\t\t\t                    .attr({\n\t\t\t                        fill: '#82B5E6',\n\t\t\t                        padding: 10,\n\t\t\t                        r: 5,\n\t\t\t                        zIndex: 8\n\t\t\t                    })\n\t\t\t                    .css({\n\t\t\t                        color: '#FFFFFF'\n\t\t\t                    })\n\t\t\t                    .add();\n\t\t\t\n\t\t\t                setTimeout(function () {\n\t\t\t                    label.fadeOut();\n\t\t\t                }, 2000);\t\n\t\t\t            }\n\t\t                \n\t\t\t\t        previousValue = event.yAxis[0].value;\t\t            \n\t\t\t            \n\t\t            }\n\t\t\t\t        \n\t\t\t\t},\t\t\t    \n\t\t\t    \n\t\t\t  },\n\n\t\t\t  rangeSelector: {\n\t\t\t    enabled: false\n\t\t\t  },\n\n\t\t\t  navigator: {\n\t\t\t    enabled: false\n\t\t\t  },\n\n\t\t\t  tooltip: {\n\t\t\t    enabled: true\n\t\t\t  },\n\n\t\t      scrollbar: {\n\t\t      \tenabled: false\n\t\t      },\n\n\t\t\txAxis: {\n\t\t\t  type: 'datetime',\n\t\t\t  \t\t\t  \n\t\t\t  dateTimeLabelFormats: {\n\t\t\t        second: '%Y-%m-%d<br/>%H:%M:%S',\n\t\t\t        minute: '%Y-%m-%d<br/>%H:%M',\n\t\t\t        hour: '%Y-%m-%d<br/>%H:%M',\n\t\t\t        day: '%Y<br/>%m-%d',\n\t\t\t        week: '%Y<br/>%m-%d',\n\t\t\t        month: '%Y-%m',\n\t\t\t        year: '%Y'\n\t\t\t  }\n\t\t\t},\n\n\t        yAxis: [{\n\n\t            labels: {\n\t                align: 'right',\n\t                x: -3\n\t            },\n\t            height: '75%',\n\t            lineWidth: 2,\n\t            resize: {\n\t                enabled: true\n\t            }\n\t        }, {\n\t            labels: {\n\t                align: 'right',\n\t                x: -3\n\t            },\n\t            top: '65%',\n\t            height: '25%',\n\t            offset: 0,\n\t            lineWidth: 2\n\t        }],\n\n\t\t\tplotOptions: {\n\n\t\t        series: {\n\t\t\t\t\tallowPointSelect: false,\n\t\t            dashStyle: 'solid',\n\t\t\t\t\tenableMouseTracking: false,\n\t\t            marker: {\n\t\t                enabled: false,\n\t\t\t            states: {\n\t\t\t                select: {\n\t\t\t                    enabled: false\n\t\t\t                },\n\t\t\t                hover: {\n\t\t\t                    enabled: false,\n\t\t\t                    halo: {\n\t\t\t\t\t\t\t\t\tsize: 0\n\t\t\t\t\t\t\t\t}\n\t\t\t                },\n\t\t\t                normal: {\n\t\t\t                    animation: false\n\t\t\t                }\n\t\t\t                \n\t\t\t            }\n\t\t            }\n\t\t            \n\t\t        },\n\n\t\t\t\tohlc: {\n\t\t\t\t    color: 'red',\n\t\t\t\t    upColor: 'green',\n\t\t\t\t    lineWidth: 2\n                }\n\t\t\t},\n\n            series: [\n              \t{\n\t                name: this.props.symbol,\n\t                id: 'STOCK',\n\t                type: 'ohlc',\n\t                data: data,\n            \t},\n\t\t\t\t{\n\t\t            name: 'Volym',\n\t\t            type: 'column',\n\t\t            data: volume,\n\t\t            yAxis: 1,\n\t        \t},\n\t\t\t\t{ \n\t\t\t\t\tname: 'sma50',\n\t\t            type: 'sma',\n\t\t            color: 'green',\t\n\t\t            lineWidth: 2,\n\t\t            linkedTo: 'STOCK',\n\t\t            params: {\n\t\t            \tperiod: 50\n\t\t            }\n\t        \t},\n\t\t\t\t{ \n\t\t\t\t\tname: 'sma14',\n\t\t            type: 'sma',\n\t\t            color: 'red',\t\n\t\t            lineWidth: 4,\n\t\t            linkedTo: 'STOCK',\n\t\t            params: {\n\t\t            \tperiod: 200\n\t\t            }\n\t\t            \n\t        \t}\n\t        ]\n\n            };\n            \n            config.xAxis.min = Date.UTC(oneYearAgo.getFullYear(), oneYearAgo.getMonth(), oneYearAgo.getDate());\n            \n            this.setState({ready:true, config:config, atr:atr, drops:drops});\n\n        })\n        .catch(error => {\n            console.error(error.message);\n        })\n\n    }\n    \n\tonClick() {\n    \tthis.props.callback(this.props.symbol);\n\t}    \n        \n    render() {\n        if (this.state.ready) {\n\n            var style = {};\n            style.border = '5px solid rgba(0, 0, 0, 0.1)';\n            style.marginLeft = '10em';\n            style.marginRight = '10em';\n            style.marginTop = '5em';\n            style.marginBottom = '5em';\n\n            return (\n                <div style = {style}>\n\t                <HighchartsReact highcharts={Highcharts} options={this.state.config}></HighchartsReact>\n\t                <InfoBox symbol={this.props.symbol} sectors={this.props.sectors} atr={this.state.atr} drops={this.state.drops}></InfoBox>\n\t                <Form><Form.Group textAlign='center'>\n\t                <Button size='lg' onClick={this.onClick}>Kandidat</Button>\n\t                </Form.Group></Form>\n                </div>\n            );\n\n        }\n        // Annars visa en tom graf...\n        else {\n            return (<div>Tomt</div>);\n        }\n    }\n\n\n\n}\n","/Users/magnus/GitHub/strecket/src/pages/meg/info-box.js",["228","229","230","231","232","233","234","235","236","237"],"import React from \"react\";\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\n\nimport {Table, Alert, Spinner, Form, Checkbox, Button} from \"react-bootify\";\n\nimport Request from \"yow/request\";\nimport sprintf from \"yow/sprintf\";\n\nexport default class InfoBox extends React.Component {\n\t\n    constructor(args) {\n        super(args);\n\n        this.state = {\n\t        ready: false,\n\t        rawDump: null\n        }\n    }\n    \n    getColor(percentage) {\n\t    const climateGood = \"table-success\";\n\t    const climateAcceptable = \"table-warning\"; \n\t    const climateBad = \"table-danger\";\n\t    \n\t    var p = parseFloat(percentage);\n\n        if (p >= 0.7) return climateGood;\n\n        if (p >= 0.5) return climateAcceptable;\n        \n        if (p == 0) return \"table-secondary\";\n\n        else return climateBad;\n    }    \n\n    fetch() {\n        return new Promise((resolve, reject) => {\n            var request = new Request(\"http://85.24.185.150:3000\");\n\n            request\n                .get(\"/rawdump/\" + this.props.symbol)\n                .then(response => {\n                    resolve(response.body);\n                })\n                .catch(error => {\n                    reject(error);\n                });\n        });\n    }\n\n    componentDidMount() {\n        this.setState({ready: false});\n\n        this.fetch()\n            .then(rawDump => {\n                this.setState({rawDump: rawDump, ready: true});\n            })\n            .catch(error => {\n                this.setState({ready: true});\n            });\n    }\n    \n    getStatistics(stockInfo) {\n\t    \n\t    if (this.state.rawDump != []) {\n\t\t\tvar pegRatio = 0;\n\t\t\tvar sharesShort = 0;\n\t\t\tvar sharesShortPriorMonth = 0;\t\t\t\n\t\t\tvar dividendYield = 0;\n\t\t\tvar marketCap = 0;\t\n\t\t\tvar currentRatio = 0;\n\t\t\tvar quickRatio = 0;\n\t\t\tvar debtToEquity = 0;\n\t\t\tvar longName = \"-\";\n\t\t\tvar sector = \"-\";\n\t\t\tvar industry = \"-\";\n\t\t\tvar longBusinessSummary = \"-\";\n\t\t\tvar forwardPE = 0;\n\t\t\tvar trailingPE = 0;\n\t\t\tvar regularMarketPrice = 0;\n\n\t\t    if (this.state.rawDump.defaultKeyStatistics !== undefined) {\t\t\t    \n\t\t\t\tpegRatio              = this.state.rawDump.defaultKeyStatistics.pegRatio;\n\t\t\t\tsharesShort           = this.state.rawDump.defaultKeyStatistics.sharesShort;\n\t\t\t\tsharesShortPriorMonth = this.state.rawDump.defaultKeyStatistics.sharesShortPriorMonth;\n\t\t\t}\n\n\t\t    if (this.state.rawDump.summaryDetail !== undefined) {\n\t\t\t\tdividendYield         = this.state.rawDump.summaryDetail.dividendYield;\n\t\t\t\tmarketCap             = this.state.rawDump.summaryDetail.marketCap;\n\t\t\t\tforwardPE             = (this.state.rawDump.summaryDetail.forwardPE !== undefined) ? this.state.rawDump.summaryDetail.forwardPE : 0;\n\t\t\t\ttrailingPE            = (this.state.rawDump.summaryDetail.trailingPE !== undefined) ? this.state.rawDump.summaryDetail.trailingPE : 0;\n\t\t\t}\n\t\n\t\t    if (this.state.rawDump.financialData !== undefined) {\t\t\t\n\t\t\t\tcurrentRatio          = this.state.rawDump.financialData.currentRatio;\n\t\t\t\tquickRatio            = this.state.rawDump.financialData.quickRatio;\n\t\t\t\tdebtToEquity          = this.state.rawDump.financialData.debtToEquity;\n\t\t\t}\n\n\t\t    if (this.state.rawDump.price !== undefined) {\n\t\t\t\tlongName              = this.state.rawDump.price.longName;\n\t\t\t    regularMarketPrice    = this.state.rawDump.price.regularMarketPrice;\t\t\t    \n\t\t    }\n\t\n\t\t    if (this.state.rawDump.summaryProfile !== undefined) {\n\t\t\t\tsector                = this.state.rawDump.summaryProfile.sector;\n\t\t\t\tindustry              = this.state.rawDump.summaryProfile.industry;\n\t\t\t\tlongBusinessSummary   = this.state.rawDump.summaryProfile.longBusinessSummary;\t\t\t    \n\t\t    }\n\t\t    \t\t\t\n\t\t\tstockInfo.score = 0;\n\t\t\n\t\t\tstockInfo.pegRatio    = pegRatio;\n\t\t\tstockInfo.pegRatio_OK = (pegRatio <= 1.2 && pegRatio > 0);\n\t\t\tif (stockInfo.pegRatio_OK)\n\t\t\t\t++stockInfo.score\n\t\t\t\n\t\t\tstockInfo.sharesShort    = parseFloat((1 - (sharesShortPriorMonth/sharesShort))*100).toFixed(2);\n\t\t\tstockInfo.sharesShort_OK = (sharesShort<sharesShortPriorMonth);\n\t\t\tif (stockInfo.sharesShort_OK)\n\t\t\t\t++stockInfo.score\n\t\t\t\n\t\t\tstockInfo.dividendYield    = (dividendYield * 100).toFixed(2);\n\t\t\tstockInfo.dividendYield_OK = (dividendYield !== undefined && dividendYield !== 0);\n\t\t\tif (stockInfo.dividendYield_OK)\n\t\t\t\t++stockInfo.score\n\t\n\t\t\tstockInfo.currentRatio    = currentRatio;\n\t\t\tstockInfo.currentRatio_OK = (currentRatio <= 1 && currentRatio > 0);\n\t\t\tif (stockInfo.currentRatio_OK)\n\t\t\t\t++stockInfo.score\n\t\t\t\n\t\t\tstockInfo.quickRatio    = quickRatio;\n\t\t\tstockInfo.quickRatio_OK = (quickRatio >= 1 && quickRatio > 0);\n\t\t\tif (stockInfo.quickRatio_OK)\n\t\t\t\t++stockInfo.score\n\t\t\t\n\t\t\tstockInfo.debtToEquity    = debtToEquity;\n\t\t\tstockInfo.debtToEquity_OK = (debtToEquity < 35 && debtToEquity > 0);\n\t\t\tif (stockInfo.debtToEquity_OK)\n\t\t\t\t++stockInfo.score\n\t\t\t\n\t\t\tstockInfo.forwardPE    = (forwardPE).toFixed(0);\n\t\t\tstockInfo.forwardPE_OK = (forwardPE < 15 && forwardPE > 0);\n\t\t\tif (stockInfo.forwardPE_OK)\n\t\t\t\t++stockInfo.score\n\t\t\t\n\t\t\tstockInfo.trailingPE    = (trailingPE).toFixed(0);\n\t\t\tstockInfo.trailingPE_OK = (trailingPE < 25 && trailingPE > 0);\n\t\t\tif (stockInfo.trailingPE_OK)\n\t\t\t\t++stockInfo.score\n\t\t\t\n\t\t\tstockInfo.marketCap    = Intl.NumberFormat(\"SE\").format(marketCap);\n\t\t\tstockInfo.marketCap_OK = (marketCap < 5000000000 && marketCap > 0); // Market Cap < $5 billion\n\t\t\tif (stockInfo.marketCap_OK)\n\t\t\t\t++stockInfo.score\n\t\t\t\n\t\t\tstockInfo.longName            = longName;\n\t\t\tstockInfo.sector              = sector;\n\t\t\tstockInfo.industry            = industry;\n\t\t\tstockInfo.longBusinessSummary = longBusinessSummary;\n\t\t\t\n\t\t\tif (regularMarketPrice != 0) {\n\t\t\t\tstockInfo.atr = ((this.props.atr/regularMarketPrice)*100).toFixed(2) + \"% (\" + (this.props.atr).toFixed(2) + \")\";\n\t\t\t\tstockInfo.atr_OK = (((this.props.atr/regularMarketPrice)*100) < 2.5);\n\t\t\t\tif (stockInfo.atr_OK)\t\t\n\t\t\t\t\t++stockInfo.score\t\t\t\t\n\t\t\t}\n\t\t\telse\n\t\t\t\tstockInfo.atr_OK = false;\n\t\t\t\n\t\t\tstockInfo.maxDrop = Math.min.apply(null, this.props.drops);\n\t\t\tstockInfo.maxDrop_OK = (stockInfo.maxDrop > -6);\n\t\t\tif (stockInfo.maxDrop_OK)\t\t\n\t\t\t\t++stockInfo.score\n\t\n\t\t\tif (this.state.rawDump.earnings !== undefined) {\t\t\n\t\t\t\tif (this.state.rawDump.earnings.financialsChart.quarterly !== undefined) {\n\t\t\t\t\t\n\t\t\t\t\tstockInfo.earnings = [];\n\t\t\t\t\tstockInfo.revenue = [];\n\t\t\t\t\tstockInfo.quarters = [];\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tfor (var i in this.state.rawDump.earnings.financialsChart.quarterly) {\n\t\t\t\t\t\tstockInfo.earnings.push(this.state.rawDump.earnings.financialsChart.quarterly[i].earnings);\n\t\t\t\t\t\tstockInfo.revenue.push(this.state.rawDump.earnings.financialsChart.quarterly[i].revenue);\n\t\t\t\t\t\tstockInfo.quarters.push(this.state.rawDump.earnings.financialsChart.quarterly[i].date);\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\t\t\t\n\t\t\t}\n\t\t}\n\n    }\n    \n    \n\trender() {\n        var self = this;\n        var stockInfo = [];\n        \t    \n        if (this.state.ready) {\n            var style = {};\n            style.border = \"1px solid rgba(0, 0, 0, 0.1)\";\n            style.marginLeft = \"10em\";\n            style.marginRight = \"10em\";\n            style.marginTop = \"5em\";\n            style.marginBottom = \"5em\";\n                    \n\t\t\tself.getStatistics(stockInfo);\n\t\t\t\n\t\t\tif (this.state.rawDump.length == 0) {\n\t            return (\n\t                <div style={style}>\n\t                    <Table responsive={true} size={'sm'}>\n\t                        <tbody>\n\t                            <tr>\n\t                                <td colSpan=\"6\" className=\"table-primary\">\n\t                                    <h3 className=\"text-center\">Info saknas.</h3>\n\t                                </td>\n\t                            </tr>\n\t                        </tbody>\n\t                    </Table>\n\t                    \n\t                </div>\n\t            );\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tvar configEarnings = {\n\t\t\t\tchart: {\n\t\t\t\t    type: 'column'\n\t\t\t\t},\n\t\t\t\ttitle: {\n\t\t\t\t\ttext: ''\t\n\t\t\t\t},\n\t\t\t    xAxis: {\n\t\t\t        categories: stockInfo.quarters\n\t\t\t    },\n\t\t\t\tyAxis: {\n\t\t\t        title: {\n\t\t\t            text: ''\n\t\t\t        }\n\t\t\t    },\t\t\t    \t\t\t\t\n\t\t\t\tseries: [{\n\t\t\t\t\tname: 'Vinst',\n\t\t\t\t\tdata: stockInfo.earnings\n\t\t\t\t}]\n\t\t\t}\t            \t\t\t\n\n\t\t\tvar configRevenue = {\n\t\t\t\tchart: {\n\t\t\t\t    type: 'column'\n\t\t\t\t},\n\t\t\t\ttitle: {\n\t\t\t\t\ttext: ''\t\n\t\t\t\t},\n\t\t\t    xAxis: {\n\t\t\t        categories: stockInfo.quarters\n\t\t\t    },\n\t\t\t\tyAxis: {\n\t\t\t        title: {\n\t\t\t            text: ''\n\t\t\t        }\n\t\t\t    },\t\t\t    \t\t\t\t\n\t\t\t\tseries: [{\n\t\t\t\t\tname: 'Omsättning',\n\t\t\t\t\tdata: stockInfo.revenue\n\t\t\t\t}]\n\t\t\t}\n                        \n            var x = stockInfo.industry;\n            \n\t\t\tvar sector = this.props.sectors.find(sector => sector.industry == x); // Är denna aktie i en trendande sektor? om så -> sektor.perc visar hur många aktier i sektorn som trendar upp\n\t\t\t\n\t\t\tif (sector !== undefined) {\n\t\t\t\tif (sector.perc > 0.5)\n\t\t\t\t\t++stockInfo.score;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tsector = {};\n\t\t\t\tsector.perc = 0;\n\t\t\t}\n\n            return (\n                <div style={style}>\n                    <Table responsive={true} size={'sm'}>\n                        <tbody>\n                            <tr>\n                                <td colSpan=\"6\" className=\"table-primary\">\n                                    <h3>{stockInfo.longName + \" (\" + stockInfo.industry + \", \" + stockInfo.sector + \"), \"}<strong>{stockInfo.score}</strong></h3>\n                                </td>\n                            </tr>\n                            <tr>\n                                <td colSpan=\"6\" className=\"table-primary\">\n                                \t<small>{stockInfo.longBusinessSummary}</small>\n                                </td>\n                            </tr>                        \n                            <tr>\n                                <td className={ stockInfo.pegRatio_OK ? 'table-success' : 'table-danger'}>\n                                    <h5 className=\"text-white text-center\">{\"PEG: \" + stockInfo.pegRatio}</h5>\n                                </td>\n                                <td className={ stockInfo.dividendYield_OK ? 'table-success' : 'table-danger'}>\n                                    <h5 className=\"text-white text-center\">{\"Utdelning: \" + stockInfo.dividendYield}%</h5>\n                                </td>\n                                <td className={ stockInfo.currentRatio_OK ? 'table-success' : 'table-danger'}>\n                                    <h5 className=\"text-white text-center\">{\"Current ratio: \" + stockInfo.currentRatio}</h5>\n                                </td>\n                                <td className={ stockInfo.quickRatio_OK ? 'table-success' : 'table-danger'}>\n                                    <h5 className=\"text-white text-center\">{\"Quick ratio: \" + stockInfo.quickRatio}</h5>\n                                </td>\n                                <td className={ stockInfo.sharesShort_OK ? 'table-success' : 'table-danger'}>\n                                    <h5 className=\"text-white text-center\">{\"Blankare: \" + stockInfo.sharesShort}%</h5>\n                                </td>\n                                <td className={ stockInfo.maxDrop_OK ? 'table-success' : 'table-danger'}>\n                                    <h5 className=\"text-white text-center\">{\"Maxdrop (100d): \" + stockInfo.maxDrop + \"%\"}</h5>\n                                </td>\n                            </tr>\n                            <tr>\n                                <td className={ stockInfo.debtToEquity_OK ? 'table-success' : 'table-danger'}>\n                                    <h5 className=\"text-white text-center\">{\"Skuld/Eget kapital: \" + stockInfo.debtToEquity}</h5>\n                                </td>\n                                <td className={ stockInfo.forwardPE_OK ? 'table-success' : 'table-danger'}>\n                                    <h5 className=\"text-white text-center\">{\"Forward P/E: \" + stockInfo.forwardPE}</h5>\n                                </td>\n                                <td className={ stockInfo.trailingPE_OK ? 'table-success' : 'table-danger'}>\n                                    <h5 className=\"text-white text-center\">{\"Trailing P/E: \" + stockInfo.trailingPE}</h5>\n                                </td>\n                                <td className={ stockInfo.marketCap_OK ? 'table-success' : 'table-danger'}>\n                                    <h5 className=\"text-white text-center\">{\"Marknadsvärde: \" + stockInfo.marketCap}</h5>\n                                </td>\n                                <td className={self.getColor(sector.perc)}>\n                                    <h5 className=\"text-white text-center\">Industri</h5>\n                                </td>\n                                <td className={stockInfo.atr_OK ? 'table-success' : 'table-danger'}>\n                                    <h5 className=\"text-white text-center\">{\"ATR: \" + stockInfo.atr}</h5>\n                                </td>\n                            </tr>\n                            <tr>\n                                <td colSpan=\"3\" className=\"text-center\">\n\t\t\t\t\t\t\t\t\t<HighchartsReact\n\t\t\t\t\t\t\t\t\t    highcharts={Highcharts}\n\t\t\t\t\t\t\t\t\t    options={configEarnings}\n\t\t\t\t\t\t\t\t\t  />                                \n\t\t\t\t\t\t\t\t</td>\n                                <td colSpan=\"3\" className=\"text-center\">\n\t\t\t\t\t\t\t\t\t<HighchartsReact\n\t\t\t\t\t\t\t\t\t    highcharts={Highcharts}\n\t\t\t\t\t\t\t\t\t    options={configRevenue}\n\t\t\t\t\t\t\t\t\t  />                                \n\t\t\t\t\t\t\t\t</td>\n                            </tr>\n                        </tbody>\n                    </Table>\n                    \n                </div>\n            );\n        } else {\n            return (<div><Spinner type=\"grow\"/></div>);\n        }\n    }\n\n\n};\n\n\n",{"ruleId":"238","replacedBy":"239"},{"ruleId":"240","replacedBy":"241"},{"ruleId":"238","replacedBy":"242"},{"ruleId":"240","replacedBy":"243"},{"ruleId":"244","severity":1,"message":"245","line":4,"column":20,"nodeType":"246","messageId":"247","endLine":4,"endColumn":25},{"ruleId":"244","severity":1,"message":"248","line":4,"column":27,"nodeType":"246","messageId":"247","endLine":4,"endColumn":30},{"ruleId":"244","severity":1,"message":"249","line":4,"column":32,"nodeType":"246","messageId":"247","endLine":4,"endColumn":35},{"ruleId":"244","severity":1,"message":"250","line":5,"column":9,"nodeType":"246","messageId":"247","endLine":5,"endColumn":19},{"ruleId":"244","severity":1,"message":"251","line":5,"column":21,"nodeType":"246","messageId":"247","endLine":5,"endColumn":35},{"ruleId":"244","severity":1,"message":"252","line":5,"column":37,"nodeType":"246","messageId":"247","endLine":5,"endColumn":60},{"ruleId":"244","severity":1,"message":"253","line":5,"column":62,"nodeType":"246","messageId":"247","endLine":5,"endColumn":76},{"ruleId":"244","severity":1,"message":"254","line":116,"column":14,"nodeType":"246","messageId":"247","endLine":116,"endColumn":17},{"ruleId":"255","severity":1,"message":"256","line":210,"column":46,"nodeType":"257","messageId":"258","endLine":210,"endColumn":48},{"ruleId":"259","severity":1,"message":"260","line":292,"column":85,"nodeType":"261","endLine":292,"endColumn":119},{"ruleId":"244","severity":1,"message":"248","line":4,"column":34,"nodeType":"246","messageId":"247","endLine":4,"endColumn":37},{"ruleId":"244","severity":1,"message":"249","line":4,"column":39,"nodeType":"246","messageId":"247","endLine":4,"endColumn":42},{"ruleId":"244","severity":1,"message":"262","line":4,"column":44,"nodeType":"246","messageId":"247","endLine":4,"endColumn":52},{"ruleId":"263","severity":1,"message":"264","line":63,"column":7,"nodeType":"246","messageId":"265","endLine":63,"endColumn":11},{"ruleId":"263","severity":1,"message":"266","line":65,"column":7,"nodeType":"246","messageId":"265","endLine":65,"endColumn":13},{"ruleId":"244","severity":1,"message":"254","line":77,"column":13,"nodeType":"246","messageId":"247","endLine":77,"endColumn":16},{"ruleId":"255","severity":1,"message":"256","line":92,"column":28,"nodeType":"257","messageId":"258","endLine":92,"endColumn":30},{"ruleId":"244","severity":1,"message":"267","line":14,"column":7,"nodeType":"246","messageId":"247","endLine":14,"endColumn":20},{"ruleId":"244","severity":1,"message":"268","line":15,"column":7,"nodeType":"246","messageId":"247","endLine":15,"endColumn":18},{"ruleId":"244","severity":1,"message":"269","line":16,"column":7,"nodeType":"246","messageId":"247","endLine":16,"endColumn":20},{"ruleId":"244","severity":1,"message":"270","line":17,"column":7,"nodeType":"246","messageId":"247","endLine":17,"endColumn":19},{"ruleId":"244","severity":1,"message":"271","line":18,"column":7,"nodeType":"246","messageId":"247","endLine":18,"endColumn":27},{"ruleId":"244","severity":1,"message":"272","line":19,"column":7,"nodeType":"246","messageId":"247","endLine":19,"endColumn":19},{"ruleId":"244","severity":1,"message":"273","line":20,"column":7,"nodeType":"246","messageId":"247","endLine":20,"endColumn":16},{"ruleId":"244","severity":1,"message":"274","line":21,"column":7,"nodeType":"246","messageId":"247","endLine":21,"endColumn":24},{"ruleId":"244","severity":1,"message":"275","line":22,"column":7,"nodeType":"246","messageId":"247","endLine":22,"endColumn":31},{"ruleId":"244","severity":1,"message":"276","line":23,"column":7,"nodeType":"246","messageId":"247","endLine":23,"endColumn":26},{"ruleId":"244","severity":1,"message":"277","line":24,"column":7,"nodeType":"246","messageId":"247","endLine":24,"endColumn":27},{"ruleId":"244","severity":1,"message":"278","line":25,"column":7,"nodeType":"246","messageId":"247","endLine":25,"endColumn":20},{"ruleId":"244","severity":1,"message":"279","line":26,"column":7,"nodeType":"246","messageId":"247","endLine":26,"endColumn":21},{"ruleId":"244","severity":1,"message":"254","line":126,"column":14,"nodeType":"246","messageId":"247","endLine":126,"endColumn":17},{"ruleId":"244","severity":1,"message":"280","line":207,"column":13,"nodeType":"246","messageId":"247","endLine":207,"endColumn":17},{"ruleId":"259","severity":1,"message":"260","line":212,"column":80,"nodeType":"261","endLine":212,"endColumn":114},{"ruleId":"244","severity":1,"message":"281","line":2,"column":9,"nodeType":"246","messageId":"247","endLine":2,"endColumn":16},{"ruleId":"244","severity":1,"message":"248","line":2,"column":44,"nodeType":"246","messageId":"247","endLine":2,"endColumn":47},{"ruleId":"244","severity":1,"message":"249","line":2,"column":49,"nodeType":"246","messageId":"247","endLine":2,"endColumn":52},{"ruleId":"244","severity":1,"message":"282","line":3,"column":8,"nodeType":"246","messageId":"247","endLine":3,"endColumn":15},{"ruleId":"244","severity":1,"message":"252","line":4,"column":37,"nodeType":"246","messageId":"247","endLine":4,"endColumn":60},{"ruleId":"244","severity":1,"message":"253","line":4,"column":62,"nodeType":"246","messageId":"247","endLine":4,"endColumn":76},{"ruleId":"244","severity":1,"message":"283","line":5,"column":9,"nodeType":"246","messageId":"247","endLine":5,"endColumn":17},{"ruleId":"244","severity":1,"message":"284","line":5,"column":19,"nodeType":"246","messageId":"247","endLine":5,"endColumn":22},{"ruleId":"244","severity":1,"message":"285","line":5,"column":24,"nodeType":"246","messageId":"247","endLine":5,"endColumn":31},{"ruleId":"244","severity":1,"message":"286","line":6,"column":8,"nodeType":"246","messageId":"247","endLine":6,"endColumn":17},{"ruleId":"244","severity":1,"message":"287","line":13,"column":10,"nodeType":"246","messageId":"247","endLine":13,"endColumn":17},{"ruleId":"244","severity":1,"message":"288","line":24,"column":10,"nodeType":"246","messageId":"247","endLine":24,"endColumn":20},{"ruleId":"244","severity":1,"message":"254","line":65,"column":13,"nodeType":"246","messageId":"247","endLine":65,"endColumn":16},{"ruleId":"255","severity":1,"message":"256","line":76,"column":25,"nodeType":"257","messageId":"258","endLine":76,"endColumn":27},{"ruleId":"255","severity":1,"message":"256","line":78,"column":30,"nodeType":"257","messageId":"258","endLine":78,"endColumn":32},{"ruleId":"255","severity":1,"message":"256","line":80,"column":30,"nodeType":"257","messageId":"258","endLine":80,"endColumn":32},{"ruleId":"255","severity":1,"message":"256","line":82,"column":30,"nodeType":"257","messageId":"258","endLine":82,"endColumn":32},{"ruleId":"289","severity":1,"message":"290","line":97,"column":43,"nodeType":"291","messageId":"292","endLine":97,"endColumn":51},{"ruleId":"255","severity":1,"message":"256","line":135,"column":26,"nodeType":"257","messageId":"258","endLine":135,"endColumn":28},{"ruleId":"263","severity":1,"message":"293","line":137,"column":21,"nodeType":"246","messageId":"265","endLine":137,"endColumn":26},{"ruleId":"263","severity":1,"message":"293","line":145,"column":21,"nodeType":"246","messageId":"265","endLine":145,"endColumn":26},{"ruleId":"244","severity":1,"message":"294","line":2,"column":8,"nodeType":"246","messageId":"247","endLine":2,"endColumn":15},{"ruleId":"244","severity":1,"message":"248","line":3,"column":34,"nodeType":"246","messageId":"247","endLine":3,"endColumn":37},{"ruleId":"244","severity":1,"message":"249","line":3,"column":39,"nodeType":"246","messageId":"247","endLine":3,"endColumn":42},{"ruleId":"244","severity":1,"message":"295","line":3,"column":60,"nodeType":"246","messageId":"247","endLine":3,"endColumn":63},{"ruleId":"244","severity":1,"message":"296","line":3,"column":65,"nodeType":"246","messageId":"247","endLine":3,"endColumn":69},{"ruleId":"255","severity":1,"message":"297","line":57,"column":21,"nodeType":"257","messageId":"258","endLine":57,"endColumn":23},{"ruleId":"298","severity":1,"message":"299","line":82,"column":1,"nodeType":"300","endLine":711,"endColumn":2},{"ruleId":"301","severity":1,"message":"302","line":106,"column":9,"nodeType":"303","messageId":"304","endLine":109,"endColumn":28},{"ruleId":"301","severity":1,"message":"302","line":111,"column":9,"nodeType":"303","messageId":"304","endLine":186,"endColumn":9},{"ruleId":"244","severity":1,"message":"254","line":122,"column":13,"nodeType":"246","messageId":"247","endLine":122,"endColumn":16},{"ruleId":"255","severity":1,"message":"297","line":133,"column":24,"nodeType":"257","messageId":"258","endLine":133,"endColumn":26},{"ruleId":"244","severity":1,"message":"254","line":144,"column":19,"nodeType":"246","messageId":"247","endLine":144,"endColumn":22},{"ruleId":"255","severity":1,"message":"256","line":154,"column":47,"nodeType":"257","messageId":"258","endLine":154,"endColumn":49},{"ruleId":"255","severity":1,"message":"256","line":158,"column":54,"nodeType":"257","messageId":"258","endLine":158,"endColumn":56},{"ruleId":"255","severity":1,"message":"256","line":162,"column":54,"nodeType":"257","messageId":"258","endLine":162,"endColumn":56},{"ruleId":"255","severity":1,"message":"256","line":191,"column":39,"nodeType":"257","messageId":"258","endLine":191,"endColumn":41},{"ruleId":"255","severity":1,"message":"297","line":192,"column":49,"nodeType":"257","messageId":"258","endLine":192,"endColumn":51},{"ruleId":"255","severity":1,"message":"256","line":195,"column":46,"nodeType":"257","messageId":"258","endLine":195,"endColumn":48},{"ruleId":"255","severity":1,"message":"297","line":196,"column":51,"nodeType":"257","messageId":"258","endLine":196,"endColumn":53},{"ruleId":"255","severity":1,"message":"256","line":199,"column":46,"nodeType":"257","messageId":"258","endLine":199,"endColumn":48},{"ruleId":"255","severity":1,"message":"297","line":200,"column":53,"nodeType":"257","messageId":"258","endLine":200,"endColumn":55},{"ruleId":"255","severity":1,"message":"297","line":205,"column":37,"nodeType":"257","messageId":"258","endLine":205,"endColumn":39},{"ruleId":"255","severity":1,"message":"256","line":205,"column":90,"nodeType":"257","messageId":"258","endLine":205,"endColumn":92},{"ruleId":"255","severity":1,"message":"297","line":208,"column":35,"nodeType":"257","messageId":"258","endLine":208,"endColumn":37},{"ruleId":"255","severity":1,"message":"256","line":208,"column":86,"nodeType":"257","messageId":"258","endLine":208,"endColumn":88},{"ruleId":"255","severity":1,"message":"297","line":211,"column":36,"nodeType":"257","messageId":"258","endLine":211,"endColumn":38},{"ruleId":"255","severity":1,"message":"256","line":211,"column":88,"nodeType":"257","messageId":"258","endLine":211,"endColumn":90},{"ruleId":"255","severity":1,"message":"297","line":214,"column":36,"nodeType":"257","messageId":"258","endLine":214,"endColumn":38},{"ruleId":"255","severity":1,"message":"256","line":214,"column":88,"nodeType":"257","messageId":"258","endLine":214,"endColumn":90},{"ruleId":"255","severity":1,"message":"256","line":218,"column":38,"nodeType":"257","messageId":"258","endLine":218,"endColumn":40},{"ruleId":"255","severity":1,"message":"256","line":243,"column":39,"nodeType":"257","messageId":"258","endLine":243,"endColumn":41},{"ruleId":"255","severity":1,"message":"256","line":246,"column":46,"nodeType":"257","messageId":"258","endLine":246,"endColumn":48},{"ruleId":"255","severity":1,"message":"256","line":249,"column":46,"nodeType":"257","messageId":"258","endLine":249,"endColumn":48},{"ruleId":"244","severity":1,"message":"254","line":270,"column":13,"nodeType":"246","messageId":"247","endLine":270,"endColumn":16},{"ruleId":"255","severity":1,"message":"256","line":315,"column":38,"nodeType":"257","messageId":"258","endLine":315,"endColumn":40},{"ruleId":"255","severity":1,"message":"256","line":317,"column":43,"nodeType":"257","messageId":"258","endLine":317,"endColumn":45},{"ruleId":"255","severity":1,"message":"256","line":319,"column":43,"nodeType":"257","messageId":"258","endLine":319,"endColumn":45},{"ruleId":"255","severity":1,"message":"256","line":329,"column":29,"nodeType":"257","messageId":"258","endLine":329,"endColumn":31},{"ruleId":"255","severity":1,"message":"256","line":329,"column":64,"nodeType":"257","messageId":"258","endLine":329,"endColumn":66},{"ruleId":"255","severity":1,"message":"256","line":329,"column":100,"nodeType":"257","messageId":"258","endLine":329,"endColumn":102},{"ruleId":"255","severity":1,"message":"256","line":329,"column":138,"nodeType":"257","messageId":"258","endLine":329,"endColumn":140},{"ruleId":"255","severity":1,"message":"256","line":335,"column":29,"nodeType":"257","messageId":"258","endLine":335,"endColumn":31},{"ruleId":"255","severity":1,"message":"256","line":336,"column":124,"nodeType":"257","messageId":"258","endLine":336,"endColumn":126},{"ruleId":"255","severity":1,"message":"256","line":341,"column":29,"nodeType":"257","messageId":"258","endLine":341,"endColumn":31},{"ruleId":"255","severity":1,"message":"297","line":342,"column":100,"nodeType":"257","messageId":"258","endLine":342,"endColumn":102},{"ruleId":"255","severity":1,"message":"256","line":350,"column":29,"nodeType":"257","messageId":"258","endLine":350,"endColumn":31},{"ruleId":"255","severity":1,"message":"297","line":351,"column":100,"nodeType":"257","messageId":"258","endLine":351,"endColumn":102},{"ruleId":"255","severity":1,"message":"256","line":359,"column":29,"nodeType":"257","messageId":"258","endLine":359,"endColumn":31},{"ruleId":"255","severity":1,"message":"256","line":367,"column":24,"nodeType":"257","messageId":"258","endLine":367,"endColumn":26},{"ruleId":"244","severity":1,"message":"254","line":383,"column":17,"nodeType":"246","messageId":"247","endLine":383,"endColumn":20},{"ruleId":"255","severity":1,"message":"297","line":386,"column":34,"nodeType":"257","messageId":"258","endLine":386,"endColumn":36},{"ruleId":"255","severity":1,"message":"256","line":394,"column":32,"nodeType":"257","messageId":"258","endLine":394,"endColumn":34},{"ruleId":"255","severity":1,"message":"256","line":398,"column":37,"nodeType":"257","messageId":"258","endLine":398,"endColumn":39},{"ruleId":"255","severity":1,"message":"256","line":402,"column":37,"nodeType":"257","messageId":"258","endLine":402,"endColumn":39},{"ruleId":"255","severity":1,"message":"256","line":406,"column":37,"nodeType":"257","messageId":"258","endLine":406,"endColumn":39},{"ruleId":"255","severity":1,"message":"256","line":474,"column":17,"nodeType":"257","messageId":"258","endLine":474,"endColumn":19},{"ruleId":"305","severity":1,"message":"306","line":490,"column":16,"nodeType":"246","messageId":"307","endLine":490,"endColumn":21},{"ruleId":"255","severity":1,"message":"256","line":531,"column":72,"nodeType":"257","messageId":"258","endLine":531,"endColumn":74},{"ruleId":"255","severity":1,"message":"297","line":531,"column":108,"nodeType":"257","messageId":"258","endLine":531,"endColumn":110},{"ruleId":"255","severity":1,"message":"256","line":555,"column":72,"nodeType":"257","messageId":"258","endLine":555,"endColumn":74},{"ruleId":"255","severity":1,"message":"256","line":595,"column":60,"nodeType":"257","messageId":"258","endLine":595,"endColumn":62},{"ruleId":"255","severity":1,"message":"256","line":642,"column":161,"nodeType":"257","messageId":"258","endLine":642,"endColumn":163},{"ruleId":"244","severity":1,"message":"248","line":2,"column":44,"nodeType":"246","messageId":"247","endLine":2,"endColumn":47},{"ruleId":"244","severity":1,"message":"249","line":2,"column":49,"nodeType":"246","messageId":"247","endLine":2,"endColumn":52},{"ruleId":"244","severity":1,"message":"252","line":3,"column":37,"nodeType":"246","messageId":"247","endLine":3,"endColumn":60},{"ruleId":"244","severity":1,"message":"253","line":3,"column":62,"nodeType":"246","messageId":"247","endLine":3,"endColumn":76},{"ruleId":"244","severity":1,"message":"308","line":5,"column":9,"nodeType":"246","messageId":"247","endLine":5,"endColumn":13},{"ruleId":"298","severity":1,"message":"299","line":63,"column":1,"nodeType":"300","endLine":403,"endColumn":2},{"ruleId":"244","severity":1,"message":"254","line":90,"column":13,"nodeType":"246","messageId":"247","endLine":90,"endColumn":16},{"ruleId":"289","severity":1,"message":"290","line":167,"column":43,"nodeType":"291","messageId":"292","endLine":167,"endColumn":51},{"ruleId":"255","severity":1,"message":"297","line":199,"column":38,"nodeType":"257","messageId":"258","endLine":199,"endColumn":40},{"ruleId":"255","severity":1,"message":"297","line":204,"column":38,"nodeType":"257","messageId":"258","endLine":204,"endColumn":40},{"ruleId":"255","severity":1,"message":"297","line":209,"column":39,"nodeType":"257","messageId":"258","endLine":209,"endColumn":41},{"ruleId":"255","severity":1,"message":"256","line":215,"column":37,"nodeType":"257","messageId":"258","endLine":215,"endColumn":39},{"ruleId":"255","severity":1,"message":"256","line":257,"column":44,"nodeType":"257","messageId":"258","endLine":257,"endColumn":46},{"ruleId":"289","severity":1,"message":"290","line":269,"column":43,"nodeType":"291","messageId":"292","endLine":269,"endColumn":51},{"ruleId":"255","severity":1,"message":"256","line":271,"column":25,"nodeType":"257","messageId":"258","endLine":271,"endColumn":27},{"ruleId":"255","severity":1,"message":"256","line":274,"column":25,"nodeType":"257","messageId":"258","endLine":274,"endColumn":27},{"ruleId":"255","severity":1,"message":"256","line":277,"column":25,"nodeType":"257","messageId":"258","endLine":277,"endColumn":27},{"ruleId":"255","severity":1,"message":"256","line":280,"column":29,"nodeType":"257","messageId":"258","endLine":280,"endColumn":31},{"ruleId":"255","severity":1,"message":"256","line":293,"column":26,"nodeType":"257","messageId":"258","endLine":293,"endColumn":28},{"ruleId":"263","severity":1,"message":"293","line":295,"column":21,"nodeType":"246","messageId":"265","endLine":295,"endColumn":26},{"ruleId":"263","severity":1,"message":"293","line":303,"column":21,"nodeType":"246","messageId":"265","endLine":303,"endColumn":26},{"ruleId":"244","severity":1,"message":"281","line":2,"column":9,"nodeType":"246","messageId":"247","endLine":2,"endColumn":16},{"ruleId":"244","severity":1,"message":"248","line":2,"column":44,"nodeType":"246","messageId":"247","endLine":2,"endColumn":47},{"ruleId":"244","severity":1,"message":"249","line":2,"column":49,"nodeType":"246","messageId":"247","endLine":2,"endColumn":52},{"ruleId":"244","severity":1,"message":"282","line":3,"column":8,"nodeType":"246","messageId":"247","endLine":3,"endColumn":15},{"ruleId":"244","severity":1,"message":"286","line":4,"column":8,"nodeType":"246","messageId":"247","endLine":4,"endColumn":17},{"ruleId":"255","severity":1,"message":"297","line":57,"column":53,"nodeType":"257","messageId":"258","endLine":57,"endColumn":55},{"ruleId":"255","severity":1,"message":"297","line":58,"column":72,"nodeType":"257","messageId":"258","endLine":58,"endColumn":74},{"ruleId":"255","severity":1,"message":"256","line":59,"column":132,"nodeType":"257","messageId":"258","endLine":59,"endColumn":134},{"ruleId":"255","severity":1,"message":"256","line":177,"column":26,"nodeType":"257","messageId":"258","endLine":177,"endColumn":28},{"ruleId":"263","severity":1,"message":"293","line":179,"column":21,"nodeType":"246","messageId":"265","endLine":179,"endColumn":26},{"ruleId":"263","severity":1,"message":"293","line":187,"column":21,"nodeType":"246","messageId":"265","endLine":187,"endColumn":26},{"ruleId":"309","severity":1,"message":"310","line":7,"column":5,"nodeType":"311","messageId":"312","endLine":9,"endColumn":6},{"ruleId":"255","severity":1,"message":"256","line":12,"column":28,"nodeType":"257","messageId":"258","endLine":12,"endColumn":30},{"ruleId":"244","severity":1,"message":"313","line":58,"column":7,"nodeType":"246","messageId":"247","endLine":58,"endColumn":12},{"ruleId":"255","severity":1,"message":"256","line":105,"column":29,"nodeType":"257","messageId":"258","endLine":105,"endColumn":31},{"ruleId":"255","severity":1,"message":"297","line":133,"column":34,"nodeType":"257","messageId":"258","endLine":133,"endColumn":36},{"ruleId":"244","severity":1,"message":"314","line":5,"column":16,"nodeType":"246","messageId":"247","endLine":5,"endColumn":21},{"ruleId":"244","severity":1,"message":"315","line":5,"column":32,"nodeType":"246","messageId":"247","endLine":5,"endColumn":36},{"ruleId":"244","severity":1,"message":"316","line":5,"column":38,"nodeType":"246","messageId":"247","endLine":5,"endColumn":46},{"ruleId":"244","severity":1,"message":"317","line":5,"column":48,"nodeType":"246","messageId":"247","endLine":5,"endColumn":54},{"ruleId":"244","severity":1,"message":"318","line":8,"column":8,"nodeType":"246","messageId":"247","endLine":8,"endColumn":15},{"ruleId":"255","severity":1,"message":"256","line":32,"column":15,"nodeType":"257","messageId":"258","endLine":32,"endColumn":17},{"ruleId":"255","severity":1,"message":"297","line":66,"column":29,"nodeType":"257","messageId":"258","endLine":66,"endColumn":31},{"ruleId":"255","severity":1,"message":"297","line":165,"column":27,"nodeType":"257","messageId":"258","endLine":165,"endColumn":29},{"ruleId":"255","severity":1,"message":"256","line":212,"column":34,"nodeType":"257","messageId":"258","endLine":212,"endColumn":36},{"ruleId":"255","severity":1,"message":"256","line":273,"column":67,"nodeType":"257","messageId":"258","endLine":273,"endColumn":69},"no-native-reassign",["319"],"no-negated-in-lhs",["320"],["319"],["320"],"no-unused-vars","'Table' is defined but never used.","Identifier","unusedVar","'Row' is defined but never used.","'Col' is defined but never used.","'Sparklines' is defined but never used.","'SparklinesLine' is defined but never used.","'SparklinesReferenceLine' is defined but never used.","'SparklinesBars' is defined but never used.","'req' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Dropdown' is defined but never used.","no-redeclare","'date' is already defined.","redeclared","'amount' is already defined.","'colRealEstate' is assigned a value but never used.","'colServices' is assigned a value but never used.","'colTechnology' is assigned a value but never used.","'colUtilities' is assigned a value but never used.","'colFinancialServices' is assigned a value but never used.","'colFinancial' is assigned a value but never used.","'colEnergy' is assigned a value but never used.","'colBasicMaterials' is assigned a value but never used.","'colCommunicationServices' is assigned a value but never used.","'colConsumerCyclical' is assigned a value but never used.","'colConsumerDefensive' is assigned a value but never used.","'colHealthcare' is assigned a value but never used.","'colIndustrials' is assigned a value but never used.","'self' is assigned a value but never used.","'Popover' is defined but never used.","'isArray' is defined but never used.","'BarChart' is defined but never used.","'Bar' is defined but never used.","'Tooltip' is defined but never used.","'PropTypes' is defined but never used.","'dayDiff' is defined but never used.","'getSweDate' is defined but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of function.","FunctionExpression","expectedAtEnd","'items' is already defined.","'Request' is defined but never used.","'Tag' is defined but never used.","'Pill' is defined but never used.","Expected '!==' and instead saw '!='.","import/no-anonymous-default-export","Unexpected default export of anonymous class","ExportDefaultDeclaration","no-unreachable","Unreachable code.","VariableDeclaration","unreachableCode","no-self-assign","'count' is assigned to itself.","selfAssignment","'Link' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'_symb' is assigned a value but never used.","'Alert' is defined but never used.","'Form' is defined but never used.","'Checkbox' is defined but never used.","'Button' is defined but never used.","'sprintf' is defined but never used.","no-global-assign","no-unsafe-negation"]